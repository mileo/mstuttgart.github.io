<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Código Avulso</title><link href="http://codigoavulso.com.br/" rel="alternate"></link><link href="http://codigoavulso.com.br/feeds/all.atom.xml" rel="self"></link><id>http://codigoavulso.com.br/</id><updated>2016-07-31T16:28:36-03:00</updated><entry><title>Consultando CEP com pycep-correios</title><link href="http://codigoavulso.com.br/consultando-cep-com-pycep-correios.html" rel="alternate"></link><published>2016-07-31T16:28:36-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-07-31:consultando-cep-com-pycep-correios.html</id><summary type="html">&lt;p&gt;Boa tarde, pessoal. Tudo certo?&lt;/p&gt;
&lt;p&gt;Neste &lt;em&gt;post&lt;/em&gt; irei falar um pouco sobre um pequeno projeto meu. Trata-se do &lt;a href="https://github.com/mstuttgart/pycep-correios"&gt;PyCEP Correios&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;a href="https://github.com/mstuttgart/pycep-correios"&gt;PyCEP Correios&lt;/a&gt; é uma api desenvolvida em Python que realiza a busca dos dados de um dado CEP diretamente no &lt;em&gt;webservice&lt;/em&gt; dos Correios, sendo essa a principal diferença em relação a outras api's de consulta de CEP. O retorno dessa consulta é um &lt;em&gt;dict&lt;/em&gt; contendo os dados do endereço pertencente ao CEP. Este projeto foi iniciado por mim para fins de estudo, porém ele pode ser utilizado normalmente em projetos mais sérios.&lt;/p&gt;
&lt;h3&gt;Instalação&lt;/h3&gt;
&lt;p&gt;O PyCEP Correios pode ser facilmente instalado com o comando a seguir (apenas para python3):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install pycep-correios
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Como usar&lt;/h3&gt;
&lt;p&gt;Consultar o endereço de um CEP é muito simples com o &lt;a href="https://github.com/mstuttgart/pycep-correios"&gt;PyCEP Correios&lt;/a&gt;. Não importa se o CEP fornecido possui hífen ou ponto. O &lt;a href="https://github.com/mstuttgart/pycep-correios"&gt;PyCEP Correios&lt;/a&gt; trata a entrada garantindo uma entrada válida para o &lt;em&gt;webservice&lt;/em&gt; dos Correios.&lt;/p&gt;
&lt;p&gt;Veja os exemplos a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pycep_correios.correios&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Correios&lt;/span&gt;

&lt;span class="c1"&gt;# Tambem pode ser usado .get_cep(&amp;#39;37503130&amp;#39;)&lt;/span&gt;
&lt;span class="n"&gt;endereco&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Correios&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;37503130&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rua&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bairro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cidade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complemento&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;outro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Outro exemplo, usando o CEP anterior, porém com hífen "-" e ponto ".".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pycep_correios.correios&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Correios&lt;/span&gt;

&lt;span class="n"&gt;endereco&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Correios&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;37.503-130&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rua&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bairro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cidade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complemento&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;outro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um exemplo alternativo, enviamos um CEP incorreto, com o numero de digitos inferior a 8.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pycep_correios.correios&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Correios&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;endereco&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Correios&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;37.50-130&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;CorreiosCEPInvalidCEPException&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;É isso pessoal. Este &lt;em&gt;post&lt;/em&gt; foi feito simplemesnte para apresentação do &lt;a href="https://github.com/mstuttgart/pycep-correios"&gt;PyCEP Correios&lt;/a&gt;. Eu recentemente migrei toda api para Python 3.4. A api usada para consulta (&lt;em&gt;suds&lt;/em&gt;) foi substituída pela &lt;em&gt;requests&lt;/em&gt;, já que esse ultimo tem um desenvolvimento ativo. Espero que o módulo seja útil a vocês. Se alguém possuir alguma crítica ou sugestão sinta-se livre para comentar.&lt;/p&gt;
&lt;p&gt;Obrigado por ler até aqui! Até o próximo &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;</summary><category term="correios"></category><category term="python"></category><category term="api"></category><category term="cep"></category></entry><entry><title>Mint-X KDE colors</title><link href="http://codigoavulso.com.br/mint-x-kde-colors.html" rel="alternate"></link><published>2016-07-07T13:04:11-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-07-07:mint-x-kde-colors.html</id><summary type="html">&lt;p&gt;Fala pessoal, tudo tranquilo?&lt;/p&gt;
&lt;p&gt;Desde quando comecei a ser um usuário Linux, há alguns anos, sempre gostei muito da distribuição &lt;a href="http://www.linuxmint.com.br"&gt;Linux Mint&lt;/a&gt;, preferêncialmente a versão com o ambiente gráfico &lt;a href="https://pt.wikipedia.org/wiki/KDE"&gt;KDE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Na versão 17.1, o &lt;a href="http://www.linuxmint.com.br"&gt;Linux Mint&lt;/a&gt; trouxe um conjunto de ícones denominados &lt;a href="https://www.gnome-look.org/content/show.php/Mint+X+Colors+Icon+Theme?content=165531"&gt;Mint-X&lt;/a&gt;. Entretanto, diferente de outros ambientes gráficos como o Mate ou Cinnamon, o KDE não possuia temas de cores que combinavam com os novos ícones. Diante desse fato decidi criar temas de cores para combinar com cada conjunto de ícones.&lt;/p&gt;
&lt;h3&gt;Screenshots&lt;/h3&gt;
&lt;p&gt;Abaixo segue alguns &lt;em&gt;screenshots&lt;/em&gt; do tema e de sua respectiva &lt;code&gt;KDE Color&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aqua: &lt;img alt="" src="images/mstuttgart/kde-colors/aqua.png" /&gt;&lt;/li&gt;
&lt;li&gt;Green (&lt;em&gt;default&lt;/em&gt;): &lt;img alt="" src="images/mstuttgart/kde-colors/green.png" /&gt;&lt;/li&gt;
&lt;li&gt;Pink: &lt;img alt="" src="images/mstuttgart/kde-colors/pink.png" /&gt;&lt;/li&gt;
&lt;li&gt;Teal: &lt;img alt="" src="images/mstuttgart/kde-colors/teal.png" /&gt;&lt;/li&gt;
&lt;li&gt;Yellow: &lt;img alt="" src="images/mstuttgart/kde-colors/yellow.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Segue os links de &lt;em&gt;downloads&lt;/em&gt; de cada tema.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kde-look.org/content/show.php/Mint-X+Aqua?content=176092"&gt;MintXAqua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Blue?content=176093"&gt;MintXBlue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Brown?content=176094"&gt;MintXBrown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Gray?content=176095"&gt;MintXGray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Green?content=176096"&gt;MintXGreen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Orange?content=176097"&gt;MintXOrange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Pink?content=176098"&gt;MintXPink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Purple?content=176099"&gt;MintXPurple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Red?content=176100"&gt;MintXRed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Sand?content=176101"&gt;MintXSand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Teal?content=176103"&gt;MintXTeal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kde-look.org/content/show.php/Mint-X+Yellow?content=176104"&gt;MintXYellow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Instalação&lt;/h3&gt;
&lt;p&gt;Clique no &lt;em&gt;link&lt;/em&gt; da cor desejada e faça o &lt;em&gt;download&lt;/em&gt; do aquivo &lt;code&gt;.color&lt;/code&gt; e copie-o para o diretório &lt;code&gt;~/.kde/share/apps/color-schemes&lt;/code&gt;. Após isso, basta ir em &lt;code&gt;Configurações-&amp;gt;Aparência-&amp;gt;Cores&lt;/code&gt; e selecionar o novo tema de cores.&lt;/p&gt;
&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;É isso pessoal. Espero que gostem dos temas. Você pode acessar a página dos temas no &lt;code&gt;Github&lt;/code&gt; através deste &lt;a href="https://github.com/mstuttgart/mint-x-kde-colors"&gt;link&lt;/a&gt;. Sinta-se livre para contribuir e/ou fazer alguma crítica ou sugestão.&lt;/p&gt;
&lt;p&gt;Vlw pessoal. Até o próximo &lt;em&gt;post&lt;/em&gt;!&lt;/p&gt;</summary><category term="linux"></category><category term="linux mint"></category><category term="kde"></category><category term="colors themes"></category><category term="temas"></category><category term="cores"></category></entry><entry><title>Desfazendo um commit que já foi enviado para o repositório</title><link href="http://codigoavulso.com.br/desfazendo-um-commit-que-ja-foi-enviado-para-o-repositorio.html" rel="alternate"></link><published>2016-06-14T14:02:11-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-06-14:desfazendo-um-commit-que-ja-foi-enviado-para-o-repositorio.html</id><summary type="html">&lt;p&gt;Fala pessoal, tudo bem?&lt;/p&gt;
&lt;p&gt;Caro leitor, se você costuma utilizar o &lt;em&gt;git&lt;/em&gt; como controle de versão e trabalha em um mesmo repositório com vários contribuidores (ou mesmo sozinho), já deve ter se deparado com a situação em que você precisava desfazer um &lt;em&gt;commit&lt;/em&gt; que já havia sido enviado para repositório. Existem algumas maneiras de corrigir isso, mas de longe, a mais correta é utilizar o comando &lt;em&gt;revert&lt;/em&gt;, pois o mesmo não altera o histórico de &lt;em&gt;commits&lt;/em&gt; do repositório e ao mesmo tempo expões de forma clara o que foi corrigido.&lt;/p&gt;
&lt;p&gt;O comando &lt;code&gt;revert&lt;/code&gt; cria um &lt;em&gt;commit&lt;/em&gt; que desfaz todas as modificações do &lt;em&gt;commit&lt;/em&gt; que você corrigir. Seu funcionamento é bem simples. Podemos definir o intervalo, a partir do último &lt;em&gt;commit&lt;/em&gt; (HEAD) que será revertido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git revert HEAD~3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, os últimos 3 &lt;em&gt;commits&lt;/em&gt; serão revertidos, ou seja, o git irá criar um novo &lt;em&gt;commit&lt;/em&gt; que desfaz as modificações realizadas pelo 3 últimos &lt;em&gt;commits&lt;/em&gt; da &lt;em&gt;branch&lt;/em&gt; atual em que você está.&lt;/p&gt;
&lt;p&gt;Outro mode de uso consiste em passarmos um intervalo como parâmetro contendo os &lt;em&gt;commits&lt;/em&gt; que desejamos reverter. Vamos considerar que estamos trabalhando com na &lt;em&gt;branch&lt;/em&gt; &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git revert -n master~5..master~2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, vamos reverter o intervalo que vai do quinto &lt;em&gt;commit&lt;/em&gt; (incluindo o mesmo) mais recente ao terceiro &lt;em&gt;commit&lt;/em&gt; mais recente. Repare que o intervalor funciona da seguiten forma: &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[commit antigo, commit recent[&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;O intervalo inclui o &lt;em&gt;commit&lt;/em&gt; mais antigo e vai até o &lt;em&gt;commit&lt;/em&gt; mais recente, NÃO incluindo este último.&lt;/p&gt;
&lt;p&gt;Outra possibilidade é utilizar a &lt;em&gt;hash&lt;/em&gt; dos &lt;em&gt;commits&lt;/em&gt; seja passando uma &lt;em&gt;hash&lt;/em&gt; unica ou um intervalo. Por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git revert -n f44db3..f167fc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ou apenas&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git revert f44db3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pode ser que durante o processo de &lt;em&gt;revert&lt;/em&gt; você tenha que realizar alguns ajustes ou correções nos arquivos que serão modificados. Quando isso acontecer, realize as modificações, execute o comando &lt;code&gt;git add .&lt;/code&gt; para adicionar os arquivos que você editou e em seguida execute &lt;code&gt;git revert --continue&lt;/code&gt; para que o processo de reversão continue.&lt;/p&gt;
&lt;p&gt;Assim que realizar a reversão, basta enviar suas modificações para o repositório remoto utilizando o comando &lt;code&gt;git push&lt;/code&gt;. Desse modo os outros desenvolvedores já terão acesso a versão corrigida do código e o histórico permacerá o mesmo, adicionando apenas o &lt;em&gt;commit&lt;/em&gt; com os detalhes do &lt;em&gt;revert&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Para saber mais detalhes do commando, basta dar uma olhada na documentação oficial &lt;a href="https://git-scm.com/docs/git-revert"&gt;aqui&lt;/a&gt;. Qualquer dúvida é só deixar um comentário.&lt;/p&gt;
&lt;p&gt;Obrigado por ler e até o próximo &lt;em&gt;post&lt;/em&gt; pessoal. Até mais!&lt;/p&gt;</summary><category term="git"></category><category term="github"></category><category term="tutorial"></category></entry><entry><title>Como distribuir sua aplicação Python com PyPI</title><link href="http://codigoavulso.com.br/como-distribuir-sua-aplicacao-python-com-pypi.html" rel="alternate"></link><published>2016-06-01T13:47:24-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-06-01:como-distribuir-sua-aplicacao-python-com-pypi.html</id><summary type="html">&lt;p&gt;Imagine a seguinte situação: você passou alguns dias (ou mesmo meses) desenvolvendo uma módulo python, escreveu testes, implementou funcionalidades e depois de alguns ajustes, chegou a hora de liberar seu software para que outros desenvolvedores possam utilizá-lo. Qual o melhor modo de distribuí-lo?&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_44.png" /&gt;&lt;/p&gt;
&lt;p&gt;Caro leitor, se você costuma programar em Python (seja profissionalmente ou não) provavelmente já instalou outros módulos usando o &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;, através do comando abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install nomedomodulo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não seria interessante usar o mesmo método para distribuir a sua aplicação? Sim? Então mãos a obra.&lt;/p&gt;
&lt;h3&gt;Sobre o PyPI - Python Package Index&lt;/h3&gt;
&lt;p&gt;O site &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;, é um repositório de &lt;em&gt;softwares&lt;/em&gt; desenvolvidos na linguagem Python. Em outras palavras, ele garante que seu pacote Python sempre esteja disponível para a instalação. O seu funcionamente é simples, porém algumas configurações inicias devem ser feitas para que tudo funcione corretamente.&lt;/p&gt;
&lt;h3&gt;Crie uma conta&lt;/h3&gt;
&lt;p&gt;Primeiramente, para distribuir seus pacotes usando o &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;, precisamos criar uma conta em ambos os sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi?%3Aaction=register_form"&gt;PyPI Live&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testpypi.python.org/pypi?%3Aaction=register_form"&gt;PyPI Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recomendo que você utilize o mesmo email e senha para ambos os sites. Posteriormente, isso tornará mais fácil o processo de configuração.&lt;/p&gt;
&lt;h3&gt;Configurando o ambiente&lt;/h3&gt;
&lt;p&gt;O próximo passo é criar um arquivo &lt;code&gt;.pypirc&lt;/code&gt; em sua &lt;code&gt;home&lt;/code&gt;. Esse arquivo contem informações de auteticação, tanto para o &lt;a href="https://pypi.python.org/pypi"&gt;PyPI Live&lt;/a&gt; quando para o &lt;a href="https://testpypi.python.org/pypi"&gt;PyPI Test&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch ~/.pypirc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apesar de não ser obrigatório a criação desse aquivo, ele facilita muito nosso trabalho, uma vez que você não precisaremos inserir nosso email e senha toda vez que formos enviar nosso código para o &lt;a href="https://pypi.python.org/pypi"&gt;PyPI Live&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Abra o arquivo &lt;code&gt;.pypirc&lt;/code&gt; em seu editor de texto favorito, e insira as informações abaixo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;distutils&lt;span class="o"&gt;]&lt;/span&gt;
index-servers &lt;span class="o"&gt;=&lt;/span&gt;
  pypi
  pypitest

&lt;span class="o"&gt;[&lt;/span&gt;pypi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://pypi.python.org/pypi
&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;seu_nomedeusuario
&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sua_senha

&lt;span class="o"&gt;[&lt;/span&gt;pypitest&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://testpypi.python.org/pypi
&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;seu_nomedeusuario
&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sua_senha
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em &lt;em&gt;username&lt;/em&gt; insira seu nome de usuário e &lt;em&gt;password&lt;/em&gt;, insira sua senha. Faça isso tanto para o &lt;code&gt;pypi&lt;/code&gt; quanto para o &lt;code&gt;pypitest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Um observação importante é que, caso a sua senha possua espaço, não a coloque entre aspas. Por exemplo, se a sua senha for "batuque da viola doida", coloque exatamente o mesmo texto em &lt;em&gt;password&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;batuque da viola doida
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Preparando o seu módulo Python&lt;/h3&gt;
&lt;p&gt;Todo pacote distribuído pelo &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; precisa ter uma arquivo &lt;code&gt;setup.py&lt;/code&gt; em seu diretório raiz. E se seu projeto também usa um arquivo &lt;em&gt;readme&lt;/em&gt; em &lt;em&gt;markdown&lt;/em&gt; (normalmente chamado &lt;code&gt;README.md&lt;/code&gt;) você também precisará criar um arquivo chamado &lt;code&gt;setup.cfg&lt;/code&gt;no diretório raiz do módulo.&lt;/p&gt;
&lt;p&gt;Como exemplo, iremos utilizar o módulo &lt;a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial"&gt;codigo_avulso_test_tutorial&lt;/a&gt; que criei para ser utilizado como exemplo em nossos tutoriais. Assim, temos a seguinte estrutura básica de diretórios:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── codigo_avulso_test_tutorial
│   ├── circulo.py
│   ├── figura_geometrica.py
│   ├── __init__.py
│   └── quadrado.py
├── LICENSE
├── README.md
├── setup.cfg
├── setup.py
└── &lt;span class="nb"&gt;test&lt;/span&gt;
    ├── circulo_test.py
    ├── figura_geometrica_test.py
    ├── __init__.py
    └── quadrado_test.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aqui, o que nos interessa são os arquivos &lt;code&gt;setup.py&lt;/code&gt; e &lt;code&gt;setup.cfg&lt;/code&gt;. Dentro do arquivo &lt;code&gt;setup.py&lt;/code&gt; temos várias informações sobre nossa aplicação que serão usadas pelo &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;codigo-avulso-test-tutorial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.1.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://github.com/mstuttgart/codigo-avulso-test-tutorial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIT License&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Michell Stuttgart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;michellstut@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tutorial test unittest codigoavulso&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;Tutorial de teste unitário em Python para o blog Código Avulso&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;codigo_avulso_test_tutorial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O nome de cada &lt;em&gt;tag&lt;/em&gt; é autoexplicativo, então não vou entrar em detalhes. Basta você usar o código acima e substituir com os dados do seu pacote.&lt;/p&gt;
&lt;p&gt;O próximo passo é adicionar o seguinte conteúdo no arquivo &lt;code&gt;setup.cfg&lt;/code&gt; (caso você o tenha criado).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;metadata&lt;span class="o"&gt;]&lt;/span&gt;
description-file &lt;span class="o"&gt;=&lt;/span&gt; README.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse arquivo irá dizer ao &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; onde seu arquivo &lt;em&gt;readme&lt;/em&gt; está.&lt;/p&gt;
&lt;h3&gt;Publicando sua aplicação Python&lt;/h3&gt;
&lt;p&gt;Agora iremos estudar os passos para enviar nossa aplicação para &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;, para que ela fique disponível para ser instalada através do &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Enviando para PyPI Test&lt;/h4&gt;
&lt;p&gt;Primeiramente, vamos registrar nossa aplicação no &lt;a href="https://testpypi.python.org/pypi"&gt;PyPI Test&lt;/a&gt;. Esse passo serve para verificarmos se está tudo certo com nosso pacote e também validar se já não existe outro módulo com o mesmo nome.
Registramos nossa aplicação com o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py register -r pypitest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se tudo ocorrer bem teremos a seguinte saída (Server responde 200):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;running register
running egg_info
creating codigo_avulso_test_tutorial.egg-info
writing codigo_avulso_test_tutorial.egg-info/PKG-INFO
writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt
writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt
writing manifest file &lt;span class="s1"&gt;&amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;&lt;/span&gt;
reading manifest file &lt;span class="s1"&gt;&amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;&lt;/span&gt;
writing manifest file &lt;span class="s1"&gt;&amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;&lt;/span&gt;
running check
Registering codigo-avulso-test-tutorial to https://testpypi.python.org/pypi
Server response &lt;span class="o"&gt;(&lt;/span&gt;200&lt;span class="o"&gt;)&lt;/span&gt;: OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso exista outro pacote com o mesmo nome, teríamos de escolher outro nome para o nosso pacote. Agora com nosso pacote devidamente registrado, executamos o comando abaixo para que o pacote seja enviado para o &lt;a href="https://testpypi.python.org/pypi"&gt;PyPI Test&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py sdist upload -r pypitest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se tudo ocorrer bem (Server responde 200), você verá uma saída semelhante a esta e já poderá ver sua aplicação na lista do &lt;a href="https://testpypi.python.org/pypi"&gt;PyPI Test&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;running sdist
running egg_info
writing codigo_avulso_test_tutorial.egg-info/PKG-INFO
writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt
writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt
reading manifest file &lt;span class="s1"&gt;&amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;&lt;/span&gt;
writing manifest file &lt;span class="s1"&gt;&amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;&lt;/span&gt;
warning: sdist: standard file not found: should have one of README, README.rst, README.txt

.
.
.

creating dist
Creating tar archive
removing &lt;span class="s1"&gt;&amp;#39;codigo-avulso-test-tutorial-0.1.1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;and everything under it&lt;span class="o"&gt;)&lt;/span&gt;
running upload
Submitting dist/codigo-avulso-test-tutorial-0.1.1.tar.gz to https://testpypi.python.org/pypi
Server response &lt;span class="o"&gt;(&lt;/span&gt;200&lt;span class="o"&gt;)&lt;/span&gt;: OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Enviando para PyPI Live&lt;/h4&gt;
&lt;p&gt;Agora é pra valer. Executamos o mesmo passos para o &lt;a href="https://testpypi.python.org/pypi"&gt;PyPI Test&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py register -r pypi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tudo ocorrendo bem, enviamos nosso pacote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py sdist upload -r pypi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parabéns! Com esse ultimo passo, publicamos o nosso pacote Python com sucesso! Agora ele pode ser &lt;a href="https://pypi.python.org/pypi/codigo-avulso-test-tutorial/0.1.1"&gt;visualizado na lista de aplicações&lt;/a&gt; do &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; e ser instalado usando &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install nomedopacote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou, para o nosso exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install codigo_avulso_test_tutorial
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;É isso pessoal. Neste tutorial vimos como distribuir nossa aplicação Python, desde a crição na conta no &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; até o registro e &lt;em&gt;upload&lt;/em&gt; da nossa aplicação. Espero que tenham gostado e caso tenham alguma dúvida, deixem um comentário.&lt;/p&gt;
&lt;p&gt;Obrigado pela leitura e até o próximo tutorial.&lt;/p&gt;
&lt;h3&gt;Referências&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/CheeseShopTutorial#Submitting_Packages_to_the_Package_Index"&gt;Documentação oficial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codementor.io/python/tutorial/host-your-python-package-using-github-on-pypi"&gt;How to Host your Python Package on PyPI with GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://peterdowns.com/posts/first-time-with-pypi.html"&gt;How to submit a package to PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="pypi"></category><category term="tutorial"></category><category term="desenvolvimento"></category><category term="pypi"></category><category term="pip"></category></entry><entry><title>Como mover um subdiretório de um repositório para outro usando git</title><link href="http://codigoavulso.com.br/como-mover-um-subdiretorio-de-um-repositorio-para-outro-usando-git.html" rel="alternate"></link><published>2016-05-26T15:13:46-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-05-26:como-mover-um-subdiretorio-de-um-repositorio-para-outro-usando-git.html</id><summary type="html">&lt;p&gt;Fala pessoal, tudo tranquilo?&lt;/p&gt;
&lt;p&gt;Meu caro leitor(a), você já passou por uma situação onde precisava transferir um diretório de um repositório para outro, sem perder o histórico de contribuições?&lt;/p&gt;
&lt;p&gt;Semanas atrás me deparei com esse desafio e achei interessante compatilhar com você a solução que encontrei.&lt;/p&gt;
&lt;h4&gt;Analisando o problema&lt;/h4&gt;
&lt;p&gt;Na situação descrita acima, a &lt;em&gt;priori&lt;/em&gt;, temos duas possíveis soluções:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Criar um novo repositório e copiar o diretório desejado do antigo repositório para o novo.&lt;/li&gt;
&lt;li&gt;Clonar o repositório original, e no repositório clonado remover todos os outros diretórios e arquivos, deixando apenas diretório desejado.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As duas opções resolvem nosso problema, porém ambas possuem alguns incovenientes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Na &lt;em&gt;opção 1&lt;/em&gt;, o histórico de &lt;em&gt;commits&lt;/em&gt; do antigo repositório não é mantido, já que apenas o diretório é copiado. Desse modo, perdemos a lista de colaborações feitas por outros desenvolvedores, algo muito ruim.&lt;/li&gt;
&lt;li&gt;Na &lt;em&gt;opção 2&lt;/em&gt;, o histórico de &lt;em&gt;commits&lt;/em&gt; do antigo repositório é mantido, porém ele traz &lt;em&gt;commits&lt;/em&gt; de alterações de outras partes do projeto, o que não é interessante uma vez que desejamos separá-lo do seu antigo projeto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Não seria interessante que o histórico fosse mantido, porém apenas com os &lt;em&gt;commits&lt;/em&gt; que dizem respeito ao diretório que desejamos separar do repositório original?&lt;/p&gt;
&lt;p&gt;Felizmente, o git nos fornece ferramentas que tornam isso possível.&lt;/p&gt;
&lt;h4&gt;Resolvendo o problema&lt;/h4&gt;
&lt;p&gt;Para começar, vamos supor que temos dois repositórios: &lt;em&gt;repo_novo&lt;/em&gt;, atualmente vazio e &lt;em&gt;repo_antigo&lt;/em&gt;. O &lt;em&gt;repo_antigo&lt;/em&gt; possui dois diretórios: &lt;em&gt;dirA&lt;/em&gt; e &lt;em&gt;dirB&lt;/em&gt;. Como exemplo, vamos transferir o &lt;em&gt;dirB&lt;/em&gt; do repositório &lt;em&gt;repo_antigo&lt;/em&gt; para o repositório &lt;em&gt;repo_novo&lt;/em&gt;, sem perder seu histórico de &lt;em&gt;commits&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Incialmente, vamos fazer o clone do &lt;em&gt;repo_antigo&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/nomeusuario/repo_antigo.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entre dentro da pasta recém-clonada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; repo_antigo/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora vamos executar o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git filter-branch --prune-empty --subdirectory-filter dirB HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O comando acima aplica um filtro para subdiretórios (--subdirectory-filter) usando como referência o subdiretório que passamos como parâmetro (dirB) e analisando todo os histórico de &lt;em&gt;commits&lt;/em&gt; procurando por &lt;em&gt;commits&lt;/em&gt; relacionados a ele, do início do histórico até o &lt;em&gt;commit&lt;/em&gt; mais atual (HEAD).&lt;/p&gt;
&lt;p&gt;Após executar o comando, verifique o conteúdo da pasta &lt;em&gt;repo_antigo&lt;/em&gt;. Agora os únicos arquivos e diretórios presentes são os que estavam dentro do diretório &lt;em&gt;dirB&lt;/em&gt;. Se usarmos o comando &lt;code&gt;git log&lt;/code&gt;, veremos que apenas os &lt;em&gt;commits&lt;/em&gt; relacionados ao conteúdo de &lt;em&gt;dirB&lt;/em&gt; permaneceram no histórico. Vale lembrar aqui que os outros &lt;em&gt;commits&lt;/em&gt; não foram removidos do repositório remoto original, o histórico foi filtrado apenas localmente.&lt;/p&gt;
&lt;p&gt;O próximo passo agora é subir tudo isso para o &lt;em&gt;novo_repo&lt;/em&gt;. Para isso, precisamos primeiro substituir a url do &lt;em&gt;repo_antigo&lt;/em&gt; pela url do nosso &lt;em&gt;repo_novo&lt;/em&gt; e em seguida realizar o &lt;em&gt;push&lt;/em&gt;. Vale lembrar que se seu &lt;em&gt;repo_novo&lt;/em&gt; já possuir algum &lt;em&gt;commit&lt;/em&gt; (normalmente adicionando um arquivo README.md e um arquivo LICENSE) será necessário execura um &lt;code&gt;git pull&lt;/code&gt; antes do &lt;em&gt;push&lt;/em&gt; ou sobreescrever o commit inicial do novo repositório usando &lt;code&gt;git push -f&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote set-url origin https://github.com/usuario/novo_repo.git
git fetch origin
git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neste caso em especial, eu apenas copiei o conteúdo do diretório &lt;em&gt;dirB&lt;/em&gt; em um repositório diferente. Entretanto, a principal utilidade desse método é quando desejamos transferir o diretório para um novo repositório, sendo o mesmo posteriormente removido do repositório antigo. Porque assim, todas as novas colaborações para o conteúdo de &lt;em&gt;dirB&lt;/em&gt; devem, a partir de agora, enviadas para o &lt;em&gt;novo_repo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Apenas para complementar o &lt;em&gt;post&lt;/em&gt;. Eu fiz uso deste método recentemente, em um dos projetos que contribuo. O repositório &lt;a href="https://github.com/daylerees/colour-schemes"&gt;colour-schemes&lt;/a&gt; possui temas de vários editores usados em desenvolvimento (Sublime Text, Atom, Kate e etc), tendo cada um seu respectivo diretório com seus temas.&lt;/p&gt;
&lt;p&gt;Sou usuário da IDE &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;, então fiz alguns ajustes nos temas do diretório &lt;em&gt;jetbrains&lt;/em&gt; (empresa dona do &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;) presentes nesse repositório. Foram 55 temas ajustados (me custou algumas horas de trabalho haha) mas o resultado foi muito satisfatório. Após terminar os ajustes, enviei um &lt;em&gt;pull request&lt;/em&gt; para o repositório original. Porém o que me frustrou, foi o fato dos responsáveis pelo repositório demorarem muito tempo (muito mesmo) para revisar e aprovar os &lt;em&gt;pull requests&lt;/em&gt;. Sendo assim, decidi criar um repositório contendo apenas os temas do &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; já com minhas alterações, de modo que outros desenvolvedores pudessem usá-los. Então utilizei o método acima, clonei o meu fork do repositório original (que possuia os minhas modificações) e executei o filtro apenas para o diretório &lt;em&gt;jetbrains&lt;/em&gt;. Em seguida enviei para &lt;a href="https://github.com/mstuttgart/pycharm-colour-scheme"&gt;este meu repositório&lt;/a&gt;. Compare o conteúdo desse repositório com o meu &lt;a href="https://github.com/mstuttgart/colour-schemes/tree/feature/pycharm_themes/jetbrains"&gt;fork do repositório original&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Espero que a dica seja útil para vocês. Qualquer dúvida é só postar nos comentários.&lt;/p&gt;
&lt;p&gt;Até o próximo tutorial.&lt;/p&gt;</summary><category term="linux"></category><category term="tutorial"></category><category term="git"></category><category term="github"></category><category term="dicas"></category></entry><entry><title>Relatórios de testes com Coveralls</title><link href="http://codigoavulso.com.br/gerando-relatorios-de-testes-com-coveralls.html" rel="alternate"></link><published>2016-05-18T11:28:55-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-05-18:gerando-relatorios-de-testes-com-coveralls.html</id><summary type="html">&lt;p&gt;Na &lt;a href="http://mstuttgart.com.br/python-com-unittest-travis-ci-coveralls-e-landscape-parte-3-de-4.html"&gt;terceira parte&lt;/a&gt; do tutorial sobre &lt;em&gt;unittest&lt;/em&gt;, vimos como utilizar o serviço &lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt; para gerar relatórios sobre o testes do nosso projeto. Entretanto, uma "desvantagem" do serviço é que o processo de análise é iniciado apenas quando executarmos um &lt;em&gt;push&lt;/em&gt; ou um &lt;em&gt;pull request&lt;/em&gt;. Sendo assim, não seria interessante termos a liberdade de executar esses testes localmente?&lt;/p&gt;
&lt;p&gt;Felizmente, os desenvolvedores do &lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt; pensaram nisso e criaram um conjunto de comandos que nos permite executá-lo pelo terminal.&lt;/p&gt;
&lt;h3&gt;Instalação&lt;/h3&gt;
&lt;p&gt;Então, antes de iniciarmos, vamos a instalação do módulo, que pode ser feito pelo comando a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install coveralls
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando você instala o módulo, um &lt;em&gt;script&lt;/em&gt; de linha de comando chamado &lt;code&gt;coverage&lt;/code&gt; é adicionado ao diretório de &lt;em&gt;scripts&lt;/em&gt; python no seu sistema. Para suportar diferentes versões do Python, o módulo vem com um conjunto de &lt;em&gt;scripts&lt;/em&gt;. Então, para a versão 2.7 do Python, você pode utilizar o comando &lt;code&gt;coverage&lt;/code&gt; ou &lt;code&gt;coverage2&lt;/code&gt;. Para a versão 3, utilize &lt;code&gt;coverage3&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Gerando relatórios&lt;/h3&gt;
&lt;p&gt;O comando usado para obtermos um relatório sobre os testes do nosso projeto é simples. No diretório do projeto, basta executar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;coverage run --source&lt;span class="o"&gt;=&lt;/span&gt;nomedopacote setup.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;o comando &lt;code&gt;run&lt;/code&gt; irá coletar dados sobre nosso código fonte. No nosso caso, usaremos o repositorio que criamos para o tutorial anterior: &lt;a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial"&gt;codigo-avulso-test-tutorial&lt;/a&gt;. Assim, o comando seria:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;coverage run --source&lt;span class="o"&gt;=&lt;/span&gt;codigo_avulso_test_tutorial setup.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se você executar o comando &lt;code&gt;ls -la&lt;/code&gt; no terminal, verá que um arquivo chamando &lt;code&gt;.coverage&lt;/code&gt; foi criado. Esse arquivo contém algumas informações sobre o seu código. Vale alertar que para gerar os relatórios precisamos, obrigatoriamente, executar o comando acima, quando formos gerar o relatórios pela primeira vez ou quando o código sofrer alguma modificação.&lt;/p&gt;
&lt;p&gt;Uma vez que o arquivo &lt;code&gt;.coverage&lt;/code&gt; foi gerado, execute o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;coverage report
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um relatório com a porcentagem de cobertura de testes (entre outras informações) de cada arquivo de código fonte será exibido no terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Name                                               Stmts   Miss  Cover
----------------------------------------------------------------------
codigo_avulso_test_tutorial/__init__.py                &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   100%
codigo_avulso_test_tutorial/circulo.py                 &lt;span class="m"&gt;9&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   100%
codigo_avulso_test_tutorial/figura_geometrica.py       &lt;span class="m"&gt;5&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   100%
codigo_avulso_test_tutorial/quadrado.py                &lt;span class="m"&gt;8&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   100%
----------------------------------------------------------------------
TOTAL                                                 &lt;span class="m"&gt;22&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   100%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As colunas exibidas no relatório possuem informações interessantes. São elas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stmts: indica o total de trechos do código que, segundo o Coveralls, devem ser testados.&lt;/li&gt;
&lt;li&gt;Miss: coluna que indica quantos trechos do código ainda não estão sob testes.&lt;/li&gt;
&lt;li&gt;Cover: talvez a coluna mais importante, ela indica a porcentagem de cobertura de testes do arquivo fonte.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Em &lt;code&gt;TOTAL&lt;/code&gt; temos a cobertura total de testes do nosso projeto. Nesse projeto em especial, temos 100% porque o mesmo possui pouco código e os códigos existentes são simples de testar. Entretanto, em projeto mais complexos, nem sempre é possível chegar nessa porcentagem, então vale a pena se focar em escrever testes para as partes mais críticas do seu código e conseguir uma porcentagem perto dos 80%, considerado pelo &lt;code&gt;Coveralls&lt;/code&gt; como satisfatório.&lt;/p&gt;
&lt;h4&gt;Gerando relatório em HTML&lt;/h4&gt;
&lt;p&gt;Uma opção interessante é gerar o relatório em formato &lt;code&gt;html&lt;/code&gt; com o comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;coverage html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um diretório chamado &lt;code&gt;htmlcov&lt;/code&gt; será criado no diretório do projeto. Dentro desse diretório existe um arquivo de nome &lt;code&gt;index.html&lt;/code&gt;, que pode ser aberto no navegador.&lt;/p&gt;
&lt;p&gt;Para o Google Chrome, usamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;google-chrome htmlcov/index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ou com o Firefox&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;firefox htmlcov/index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Abaixo temos o &lt;code&gt;index.html&lt;/code&gt; aberto. Nele podemos ver a lista dos arquivos que estão cobertos pelo &lt;code&gt;Coveralls&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_41.png" /&gt;&lt;/p&gt;
&lt;p&gt;Vamos analisar os dados do arquivo &lt;code&gt;circulo.py&lt;/code&gt;. Assim, temos as seguintes colunas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;statements&lt;/code&gt;: indica o total de trechos do código que, segundo o Coveralls, devem ser testadas. No caso do arquivo &lt;code&gt;circulo.py&lt;/code&gt;,  o valor da coluna é 9, indicando que existem 9 trechos do código quem devem estar sob teste.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;missing&lt;/code&gt;: coluna que indica quantos trechos do código ainda não estão sob testes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;excluded&lt;/code&gt;: coluna que indica quantos trechos do código foram ignorados pelo Coveralls. Algumas vezes pode ser necessário excluir alguns trechos de código do relatório devido ao tipo de código nele contido ou porque você simplesmente não deseja que aquele trecho seja incluido no relatorio. Isso é feito através de um arquivo de configuração, visto mais adiante.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverage&lt;/code&gt;: indica a porcentagem de cobertura de testes do nosso código.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Na imagem abaixo, logo após clicarmos em &lt;code&gt;codigo_avulso_test_tutorial/circulo.py&lt;/code&gt;, podemos ver os pontos do código que devem ser testados.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_42.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ao clicarmos nos três botões no cabeçalho da página:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_43.png" /&gt;&lt;/p&gt;
&lt;p&gt;A página irá destacar, respectivamente, os trechos cobertos por testes, trechos sem testes ou que foram excluídos do &lt;code&gt;Coveralls&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Gerando relatório em XML&lt;/h4&gt;
&lt;p&gt;Os relatórios em XML podem ser facilmente gerados por:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;coverage xml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um arquivo chamado &lt;code&gt;coverage.xml&lt;/code&gt; será criado.&lt;/p&gt;
&lt;h4&gt;Criando o arquivo coveragerc&lt;/h4&gt;
&lt;p&gt;O arquivo &lt;code&gt;.coveragesrc&lt;/code&gt; é usado para determinar parâmetros de funcionamento do comando &lt;code&gt;coverage&lt;/code&gt;. Nele podemos incluir e excluir aquivos da analise do &lt;code&gt;Coveralls&lt;/code&gt; entre outras configurações. Abaixo temos um exemplo de arquivo de configuração.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[run]&lt;/span&gt;
&lt;span class="na"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;codigo_avulso_test_tutorial&lt;/span&gt;
&lt;span class="na"&gt;omit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    codigo_avulso_test_tutorial/__init__.py&lt;/span&gt;
&lt;span class="s"&gt;    codigo_avulso_test_tutorial/main.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na configuração acima, vamos omitir da análise o arquivo &lt;code&gt;__init__.py&lt;/code&gt; e um arquivo &lt;code&gt;main.py&lt;/code&gt;. Indicamos o &lt;em&gt;source&lt;/em&gt; que é onde o &lt;code&gt;Coveralls&lt;/code&gt; deve executar a análise.&lt;/p&gt;
&lt;p&gt;O arquivo de configuração ainda pode receber várias informações. Você pode ver mais delas &lt;a href="http://coverage.readthedocs.io/en/latest/source.html#source"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;Neste tutorial vimos um pouco mais sobre o &lt;code&gt;Coveralls&lt;/code&gt;. Evitei colocar as informações deste tutorial nos tutoriais anteriores a fim de simplificá-los. Você pode aprender mais sobre o módulo consultando sua documentação &lt;a href="http://coverage.readthedocs.io/en/latest/index.html"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É isso pessoal, obrigado pela leitura e até o próximo tutorial.&lt;/p&gt;</summary><category term="python"></category><category term="coveralls"></category><category term="coverage"></category><category term="relatório"></category><category term="test"></category></entry><entry><title>Python com Unittest, Travis CI, Coveralls e Landscape (Parte 4 de 4)</title><link href="http://codigoavulso.com.br/python-com-unittest-travis-ci-coveralls-e-landscape-parte-4-de-4.html" rel="alternate"></link><published>2016-05-07T21:09:18-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-05-07:python-com-unittest-travis-ci-coveralls-e-landscape-parte-4-de-4.html</id><summary type="html">&lt;p&gt;Fala pessoal, tudo bem?&lt;/p&gt;
&lt;p&gt;Na &lt;a href="python-com-unittest-travis-ci-coveralls-e-landscape-parte-3-de-4.html"&gt;terceira&lt;/a&gt; parte deste tutorial, aprendemos a usar o &lt;code&gt;Coveralls&lt;/code&gt; para gerar relatórios de testes para o nosso projeto. A próxima ferramenta que iremos estudar será o serviço &lt;code&gt;Landscape&lt;/code&gt;. Neste tutorial serei breve, já que o uso &lt;em&gt;default&lt;/em&gt; da ferramenta é bem simples.&lt;/p&gt;
&lt;h4&gt;Sobre o Landscape&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://landscape.io/"&gt;Landscape&lt;/a&gt; é uma ferramenta online semelhante ao já conhecido &lt;a href="https://www.pylint.org/"&gt;PyLint&lt;/a&gt;, ou seja, é um verificador de &lt;em&gt;bugs&lt;/em&gt;, estilo e de qualidade de código para &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_32.png" /&gt;&lt;/p&gt;
&lt;p&gt;Quando ativamos a análise do &lt;code&gt;Landscape&lt;/code&gt; em nosso repositório, ele é executado após cada &lt;em&gt;push&lt;/em&gt; ou &lt;em&gt;pull request&lt;/em&gt; e realiza uma varredura em nosso código fonte &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; atrás de possíveis &lt;em&gt;bugs&lt;/em&gt;, como por exemplo variáveis sendo usadas antes de serem declaradas, nomes reservados sendo usados como nomes de variáveis e etc. Ele também verifica se a formatação do seu código esta seguindo a &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; e aponta possíveis falhas de &lt;em&gt;design&lt;/em&gt; em seu código.&lt;/p&gt;
&lt;p&gt;Uma vez que a análise esteja finalizada, a ferramenta indica em porcentagem a "qualidade" do nosso código, ou em palavras mais precisas, o quanto nosso código está bem escrito segundo as boas práticas de desenvolvimento. Vale deixar claro que o &lt;code&gt;Landscape&lt;/code&gt; não verifica se seu código funciona corretamente, isso é responsabilidade dos testes que você escreveu, como foi visto na &lt;a href="python-com-unittest-travis-ci-coveralls-e-landscape-parte-1-de-4.html"&gt;primeira parte&lt;/a&gt; do tutorial.&lt;/p&gt;
&lt;p&gt;Semelhante as ferramentas dos tutoriais anteriores, o &lt;code&gt;Landscape&lt;/code&gt; é totalmente gratuito para projetos &lt;em&gt;opensource&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Criando uma conta&lt;/h4&gt;
&lt;p&gt;O processo de inscrição é simples. No topo da página temos a permissão de nos inscrevermos usando a conta do &lt;code&gt;Github&lt;/code&gt;. Realize a inscrição e vamos as configurações.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_33.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Ativando o serviço&lt;/h4&gt;
&lt;p&gt;De todas as ferramentas apresentadas, esta é a mais simples de configurar. O único passo necessário aqui é ativar o serviço para o nosso repositório. Como exemplo, estarei usando o mesmo repositório dos últimos tutoriais. Clique &lt;a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial"&gt;aqui&lt;/a&gt; para visualizar o repositório.&lt;/p&gt;
&lt;p&gt;Assim que realizar o cadastro, vamos nos deparar com uma tela contendo a listagem dos nosso repositórios que estão utilizando o serviço. Se você nunca usou o serviço provavelmente não terá nenhum repositório, então faça o seguinte: clique no botão &lt;code&gt;Sync with Github now&lt;/code&gt;, para realizar a sincronização com a sua conta do &lt;a href="https://github.com"&gt;Github&lt;/a&gt;. Assim que a sincronização estiver completa, clique no botão &lt;code&gt;Add repository&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_34.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ao clicar, seremos levados a uma tela com a listagem de todos os repositórios que temos permissão de escrita. Procure o repositório que deseja ativar o serviço (lembrando que o &lt;code&gt;Landscape&lt;/code&gt; funciona apenas para projetos &lt;code&gt;Python&lt;/code&gt;) e o selecione (basta clicar sobre o nome do repositório).&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_35.png" /&gt;&lt;/p&gt;
&lt;p&gt;Adicione o repositório clicando no botão verde &lt;code&gt;Add Repository&lt;/code&gt;, logo abaixo da lista. Seremos novamente redirecionados a tela inicial, agora com o repositório escolhido já visível.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_36.png" /&gt;&lt;/p&gt;
&lt;p&gt;Inclusive, a partir desse momento, o &lt;code&gt;Coveralls&lt;/code&gt; já irá iniciar a análise do seu projeto. Clique no nome do repositório para ver mais detalhes da analise.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_37.png" /&gt;&lt;/p&gt;
&lt;p&gt;No caso do meu projeto de teste, temos que a "saúde" do código está em &lt;code&gt;100%&lt;/code&gt;, ou seja, nenhuma parte do código apresenta erros de estilo, &lt;em&gt;bugs&lt;/em&gt; e está utilizando boas práticas de programação em todo seu escopo.&lt;/p&gt;
&lt;p&gt;Na barra lateral localizada à esquerda da página, temos alguns items, entre os quais os mais importantes são descritos a seguir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Error&lt;/code&gt;: são instruções no código que provavelmente indicam um erro. Por exemplo, quando referenciamos uma variável sem declará-la antes ou realizamos a chamada de algum método inexistente.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Smells&lt;/code&gt;: são sinais ou sintomas no código que possivelmente indicam uma falha no projeto do &lt;em&gt;software&lt;/em&gt;. Diferentemente de um &lt;em&gt;bug&lt;/em&gt;, &lt;em&gt;code smells&lt;/em&gt; não indicam uso incorreto da linguagem de programação e nem impedem o &lt;em&gt;software&lt;/em&gt; de funcionar. Ao invés disso, eles indicam falhas no &lt;em&gt;design&lt;/em&gt; do projeto que podem atrasar seu desenvolvimento ou mesmo ser a porta de entrada para &lt;em&gt;bugs&lt;/em&gt; no futuro. Exemplos de &lt;em&gt;code smells&lt;/em&gt; são: métodos ou códigos duplicados, classes muito grandes, uso forçado de algum &lt;em&gt;design pattern&lt;/em&gt; quando o mesmo poderia ser substituído por um código mais simples e fácil de manter, métodos muito longos ou com excessivo números de parâmetros e por aí vai. A lista pode crescer muito haha... para mais detalhes &lt;a href="https://en.wikipedia.org/wiki/Code_smell"&gt;leia&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Style&lt;/code&gt;: como o nome sugere, este item exibe os erros de estilo em seu código indicando trechos de código que não estão seguindo as regras de estilo da &lt;code&gt;PEP8&lt;/code&gt;, trechos de códigos com identação incorreta e etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como último passo, agora somente nos resta adicionar uma &lt;code&gt;badge&lt;/code&gt; no arquivo &lt;code&gt;README.md&lt;/code&gt; em nosso repositório. Assim poderemos ver a porcentagem de "saúde" do nosso projeto sem precisar acessar a página do &lt;code&gt;Landscape&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Na página com o resultado da análise (onde é exibido a porcentagem de "saúde" do seu projeto), podemos pegar a &lt;code&gt;badge&lt;/code&gt; do &lt;code&gt;Landscape&lt;/code&gt;. No canto superior direito da tela, você encontra os botões abaixo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_38.png" /&gt;&lt;/p&gt;
&lt;p&gt;Clique na &lt;code&gt;badge&lt;/code&gt; (onde está escrito &lt;em&gt;health&lt;/em&gt;) e a seguinte janela será exibida:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_39.png" /&gt;&lt;/p&gt;
&lt;p&gt;Selecione o texto da opção &lt;code&gt;Markdown&lt;/code&gt; e cole-o no &lt;code&gt;README.md&lt;/code&gt; do seu repositório. O meu &lt;code&gt;README.md&lt;/code&gt; ficou assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;# Codigo Avulso Test Tutorial&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//travis-ci.org/mstuttgart/codigo-avulso-test-tutorial.svg?branch=master)](https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Coverage&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//coveralls.io/repos/github/mstuttgart/codigo-avulso-test-tutorial/badge.svg?branch=master)](https://coveralls.io/github/mstuttgart/codigo-avulso-test-tutorial?branch=master)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Health&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//landscape.io/github/mstuttgart/codigo-avulso-test-tutorial/master/landscape.svg?style=flat)](https://landscape.io/github/mstuttgart/codigo-avulso-test-tutorial/master)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Também é possível configurar o &lt;code&gt;Landscape&lt;/code&gt; para que o mesmo exclua algum diretório/arquivo da análise (muito útil com arquivos de interface compilados, usando por quem trabalha com PyQt/PySide) entre outras opções, mas isso fica para um tutorial futuro.&lt;/p&gt;
&lt;p&gt;Abaixo podemos ver as três &lt;code&gt;badges&lt;/code&gt; que adicionamos em nosso projeto. Clique &lt;a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial"&gt;aqui&lt;/a&gt; para acessar o repositório.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_40.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Conclusão&lt;/h4&gt;
&lt;p&gt;Pronto pessoal, agora temos o nosso repositório exibindo informações sobre os testes unitários, relatórios de testes e analises de qualidade de código. Isso não garante que seu projeto seja livre de falhas e &lt;em&gt;bugs&lt;/em&gt;, mas te ajuda a evitá-los.&lt;/p&gt;
&lt;p&gt;Vale lembrar que todas essas ferramentas ajudam muito, mas nada substitui o senso crítico e o hábito de sempre usar boas práticas durante o desenvolvimento. Por isso sempre busque aprender mais, estudar mais, ser humilde e ouvir quem tem mais experiência que você. Enfim, ser um programador e uma pessoa melhor a cada dia. Fica o conselho para todos nós, incluindo para este que vos escreve.&lt;/p&gt;
&lt;p&gt;Espero que tenham gostado desta série de tutoriais. Obrigado por ler até aqui e até o próximo &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;</summary><category term="python"></category><category term="git"></category><category term="travis"></category><category term="coveralls"></category><category term="landscape"></category><category term="test"></category></entry><entry><title>Python com Unittest, Travis CI, Coveralls e Landscape (Parte 3 de 4)</title><link href="http://codigoavulso.com.br/python-com-unittest-travis-ci-coveralls-e-landscape-parte-3-de-4.html" rel="alternate"></link><published>2016-04-29T12:41:38-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-04-29:python-com-unittest-travis-ci-coveralls-e-landscape-parte-3-de-4.html</id><summary type="html">&lt;p&gt;Fala pessoal, tudo bem?&lt;/p&gt;
&lt;p&gt;Na &lt;a href="python-com-unittest-travis-ci-coveralls-e-landscape-parte-2-de-4.html"&gt;segunda&lt;/a&gt; parte deste tutorial, aprendemos a usar o &lt;code&gt;Travis CI&lt;/code&gt; para automatizar os testes do nosso projeto, facilitando a manutenção do código quando temos vários colaboradores. Nesta terceira parte, vamos configurar o serviço &lt;a href="https://coveralls.io"&gt;Coveralls&lt;/a&gt; para que o mesmo gere relatórios de teste sobre o nosso projeto. Os relatórios são muito úteis quando desejamos verificar o quanto do nosso projeto está coberto por testes, evitando assim que alguma &lt;em&gt;feature&lt;/em&gt; importante fique de fora. Assim como o &lt;code&gt;Travis CI&lt;/code&gt;, o &lt;code&gt;Coveralls&lt;/code&gt; será executado após cada &lt;em&gt;push&lt;/em&gt; ou &lt;em&gt;pull request&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Diferente do tutorial anterior, serei breve sobre o processo de inscrição do &lt;code&gt;Coveralls&lt;/code&gt;, focando mais no seu uso.&lt;/p&gt;
&lt;h4&gt;Criando uma conta&lt;/h4&gt;
&lt;p&gt;Antes de começarmos a usar o &lt;code&gt;Coveralls&lt;/code&gt; precisamos criar uma conta no serviço. Isso pode ser feito &lt;a href="https://coveralls.io/"&gt;aqui&lt;/a&gt;. O serviço é totalmente gratuíto para projetos &lt;code&gt;opensource&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_17.png" /&gt;&lt;/p&gt;
&lt;p&gt;Após a inscrição, você será levado para uma nova página com uma listagem dos repositórios que você possui no &lt;code&gt;Github&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_18.png" /&gt;&lt;/p&gt;
&lt;p&gt;Na imagem acima já podemos visualizar o projeto que estou usando neste tutorial: &lt;code&gt;codigo-avulso-test-tutorial&lt;/code&gt;. Caso o seu repositório não esteja na lista, clique no botão &lt;code&gt;ADD REPOS&lt;/code&gt; no canto superior direito da tela.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_19.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ao clicar no botão, você será redirecionado a uma página onde é possível slecionar quais repositórios serão analisados pelo &lt;code&gt;Coveralls&lt;/code&gt;. Caso o repositório desejado não esteja na lista, clique no botão &lt;code&gt;RE-SYNC REPOS&lt;/code&gt; no canto superior direito. Ele vai realizar o escaneamento do seu perfil no &lt;code&gt;Github&lt;/code&gt; e importar seus projetos.&lt;/p&gt;
&lt;p&gt;Clique no botão escrito &lt;code&gt;OFF&lt;/code&gt; ao lado esquerdo do nome do repositório. Isso ativará o serviço para este repositório.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_20.png" /&gt;&lt;/p&gt;
&lt;p&gt;Clique no botão &lt;code&gt;DETAILS&lt;/code&gt; ao lado direito do nome do repositório e você será redirecionado para uma tela de configuração. Aqui o passo mais interessante é pegar a &lt;em&gt;url&lt;/em&gt; da &lt;code&gt;badge&lt;/code&gt;para usarmos em nosso README.md.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://coveralls.io/github/mstuttgart/codigo-avulso-test-tutorial?branch=master"&gt;&lt;img alt="Coverage Status" src="https://coveralls.io/repos/github/mstuttgart/codigo-avulso-test-tutorial/badge.svg?branch=master" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Na área superior da tela, temos o seguinte:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_21.png" /&gt;&lt;/p&gt;
&lt;p&gt;Clique em &lt;code&gt;EMBED&lt;/code&gt; e uma janelá de dialogo irá se abrir, selecione e copie o código em &lt;code&gt;MARKDOWN&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_22.png" /&gt;&lt;/p&gt;
&lt;p&gt;Agora cole o código no cabeçalho do seu arquivo README, semelhante ao que fizemos com o &lt;code&gt;Travis CI&lt;/code&gt; no tutorial anterior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;# Codigo Avulso Test Tutorial&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//travis-ci.org/mstuttgart/codigo-avulso-test-tutorial.svg?branch=master)](https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Coverage&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//coveralls.io/repos/github/mstuttgart/codigo-avulso-test-tutorial/badge.svg?branch=master)](https://coveralls.io/github/mstuttgart/codigo-avulso-test-tutorial?branch=master)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Concluída esta estapa, o próximo passo será adicionarmos o serviço em nosso projeto no &lt;code&gt;Github&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Adicionando o Coveralls&lt;/h4&gt;
&lt;p&gt;Vamos adicionar o serviço durante o processo de teste do projeto. Assim, depois de cada &lt;code&gt;push&lt;/code&gt; ou &lt;code&gt;pull request&lt;/code&gt;, o &lt;code&gt;Coveralls&lt;/code&gt; irá gerar o relatório sobre nossos testes.&lt;/p&gt;
&lt;p&gt;Abra o arquivo &lt;code&gt;.travis.yml&lt;/code&gt; em seu editor. Teremos o seguinte código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;

&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;

&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora vamos alterá-lo adicionando a funcionalidade do &lt;code&gt;Coveralls&lt;/code&gt;. O códio atualizado do &lt;code&gt;.travis.yml&lt;/code&gt; pode ser visto a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;

&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;

&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;coveralls&lt;/span&gt;

&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coverage&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;codigo_avulso_test_tutorial&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

&lt;span class="n"&gt;after_success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coveralls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;install&lt;/code&gt;:  aqui adicionamos o comando &lt;code&gt;pip install coveralls&lt;/code&gt;. A instalação do &lt;code&gt;coveralls&lt;/code&gt; é necessaria para que possamos gerar os relatórios. Obs.: Você pode instalá-lo em sua máquina e gerar relátorios em html. Fica a sugestão de estudo.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;script&lt;/code&gt;: aqui substimuímos o comando &lt;code&gt;run setup.py test&lt;/code&gt; por &lt;code&gt;coverage run --source=codigo_avulso_test_tutorial setup.py test&lt;/code&gt;. Esse comando executa os mesmo testes de antes, mas já prove um relatório sobre a cobertura de testes do seu código.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;after_success&lt;/code&gt;: a última alteração foi adicionar a tag &lt;code&gt;after_success&lt;/code&gt;. Essa tag indica que após a execuação bem sucedida dos testes, deve-se iniciar o serviço de analise do &lt;code&gt;Coveralls&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assim que terminar de fazer essas alterações você já pode enviar o seu código para o &lt;code&gt;Github&lt;/code&gt;. Assim que subir o código, o &lt;code&gt;Travis CI&lt;/code&gt; irá iniciar o processo de teste. Finalizando os testes, o &lt;code&gt;Coveralls&lt;/code&gt;será iniciado. Se tudo ocorrer bem, a badge que adicionamos no aquivo README do projeto será atualizada exibindo a porcentagem do nosso código que está coberta por testes. Você pode clicar na badge ou ir até o seu perfil no site do &lt;a href="https://coveralls.io"&gt;Coveralls&lt;/a&gt; e verificar com mais detalhes as informações sobre seu projeto.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_23.png" /&gt;&lt;/p&gt;
&lt;p&gt;Na seção &lt;code&gt;LATEST BUILDS&lt;/code&gt; clique no último build disponível que será possível verificar a porcentagem cobertura de teste para cada arquivo do seu projeto.&lt;/p&gt;
&lt;p&gt;Caso tenha interessa, aqui está o link do repositorio que usei para esse tutorial: &lt;a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial"&gt;codigo-avulso-test-tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Conclusão&lt;/h4&gt;
&lt;p&gt;Aqui encerramos a terceira parte do nossa série de tutoriais sobre &lt;code&gt;Unittest&lt;/code&gt;. O &lt;code&gt;Coveralls&lt;/code&gt; ainda possui muitas configurações não mostradas aqui, então se você se interessar, fica a sugestão de estudo. No próximo tutorial veremos como utilizar o &lt;code&gt;Landscape&lt;/code&gt;, um &lt;em&gt;linter&lt;/em&gt; que analise nossos códigos atrás de problemas de sintaxe, formatação e possíveis erros de códigos (variáveis não declaradas, varíaveis com escopo incorreto e etc).&lt;/p&gt;
&lt;p&gt;É isso pessoal. Obrigado por ler até aqui e até o próximo tutorial!&lt;/p&gt;</summary><category term="python"></category><category term="git"></category><category term="travis-ci"></category><category term="coveralls"></category><category term="landscape"></category><category term="unittest"></category></entry><entry><title>Python com Unittest, Travis CI, Coveralls e Landscape (Parte 2 de 4)</title><link href="http://codigoavulso.com.br/python-com-unittest-travis-ci-coveralls-e-landscape-parte-2-de-4.html" rel="alternate"></link><published>2016-04-19T20:34:44-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-04-19:python-com-unittest-travis-ci-coveralls-e-landscape-parte-2-de-4.html</id><summary type="html">&lt;p&gt;Fala pessoal, tudo bem?&lt;/p&gt;
&lt;p&gt;Na &lt;a href="python-com-unittest-travis-ci-coveralls-e-landscape-parte-1-de-4.html"&gt;primeira&lt;/a&gt; parte deste tutorial, aprendemos como criar testes para nosso projeto. Nesta segunda parte, vamos configurar o serviço Travis CI para que o mesmo execute os testes do nosso projeto diretamente no github. Isso é especialmente útil quando possuímos várias pessoas trabalhando em um mesmo projeto, pois o &lt;code&gt;Travis CI&lt;/code&gt; executa os testes após cada &lt;em&gt;push&lt;/em&gt; ou &lt;em&gt;pull request&lt;/em&gt;. Dessa forma garantimos que um determinado &lt;em&gt;commit&lt;/em&gt; não irá "quebrar" nossa aplicação.&lt;/p&gt;
&lt;p&gt;Antes de inicarmos nosso trabalho de configuração do &lt;code&gt;Travis CI&lt;/code&gt;, vamos aprender um pouco mais sobre esse serviço.&lt;/p&gt;
&lt;h4&gt;Sobre o Travis CI&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt; é uma ferramenta online que permite executar o &lt;em&gt;deploy&lt;/em&gt; de sua aplicação, rodando de maneira automática os testes do seu projeto hospedado no &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;. Através dele é possível manter um histórico dos testes para cada &lt;em&gt;commit&lt;/em&gt; do seu projeto, executar testes em paralelo, além do suporte a diversas linguagens de programação. Você pode, por exemplo, verificar se seu projeto funciona corretamente tanto com Python 2.7, quanto com o Python 3.&lt;/p&gt;
&lt;p&gt;Após a execução do teste, recebemos um email nos informando se o teste foi bem sucedido ou se houve alguma falha. O serviço é totalmente gratuito para projetos &lt;em&gt;opensource&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt Text" src="images/mstuttgart/snapshot_24.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Criando uma conta&lt;/h4&gt;
&lt;p&gt;Para utilizarmos o &lt;code&gt;Travis CI&lt;/code&gt; em nosso projeto, precisamos primeiro realizar nosso cadastro no serviço. Para isso acesse &lt;a href="https://travis-ci.org/"&gt;https://travis-ci.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Logo no topo direito da página, temos o botão abaixo, para nos inscrevermos usando nossa conta no Github.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_25.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ao pressionar o botão, você será direcionado para a página a seguir:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_26.png" /&gt;&lt;/p&gt;
&lt;p&gt;Realize o login com seu usuário/senha do &lt;code&gt;Github&lt;/code&gt;. Assim que realizar o login, na canto superior direito da tela, clique no seu nome de usuário e, em seguida, em &lt;code&gt;"Accounts"&lt;/code&gt;. Com isso, uma tela com todos os repositórios que você tem permissão de escrita (repositórios pessoais, de organização, forks e etc) será exibida.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_27.png" /&gt;&lt;/p&gt;
&lt;p&gt;Agora vamos ativar o serviço para o repositório que criei na primeira parte do tutorial: &lt;a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial"&gt;codigo-avulso-test-tutorial&lt;/a&gt;. Basta clicar no botão "X" ao lado esquerdo do nome do seu repositório. Ele ficará assim:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_28.png" /&gt;&lt;/p&gt;
&lt;p&gt;Bom, a partir de agora, seu repositório está pronto para o usar o &lt;code&gt;Travis CI&lt;/code&gt;, porém antes precisamos configurar os parâmetros de teste do nosso projeto.&lt;/p&gt;
&lt;h4&gt;Configurando o Travis CI em nosso repositório&lt;/h4&gt;
&lt;p&gt;No diretório raiz do nosso projeto, vamos criar um arquivo chamado &lt;code&gt;.travis.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch .travis.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Observe que o nome do arquivo obrigatoriamente deve inciar com ponto. Após criarmos o arquivo, teremos a seguinte estrutura de diretórios:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── codigo_avulso_test_tutorial
│   ├── circulo.py
│   ├── circulo.pyc
│   ├── figura_geometrica.py
│   ├── figura_geometrica.pyc
│   ├── __init__.py
│   ├── __init__.pyc
│   ├── quadrado.py
│   └── quadrado.pyc
├── codigo_avulso_test_tutorial.egg-info
│   ├── dependency_links.txt
│   ├── PKG-INFO
│   ├── SOURCES.txt
│   └── top_level.txt
├── LICENSE
├── README.md
├── setup.py
├── test
│   ├── circulo_test.py
│   ├── circulo_test.pyc
│   ├── figura_geometrica_test.py
│   ├── figura_geometrica_test.pyc
│   ├── __init__.py
│   ├── __init__.pyc
│   ├── quadrado_test.py
│   └── quadrado_test.pyc
└── .travis.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse é nosso arquivo de configuração. Nele vamos adicionar qual linguagen nosso projeto utiliza, de quais módulos e pacotes ele depende, entre outras inúmeros ajustes, dependendo do seu projeto. Aqui, vou mostrar as configurações básicas que utilizo, para que o tutorial não fique muito extenso. Então, abra o arquivo &lt;code&gt;.travis.yml&lt;/code&gt; em seu editor preferido e adicione o seguinte código.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;

&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;

&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora vamos explicar cada tag do arquivo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;language&lt;/code&gt;: podemos definir qual linguagem nosso projeto utiliza. Se este parâmetro não for incluso, o &lt;code&gt;Travis CI&lt;/code&gt; irá considerar a linguagem &lt;code&gt;ruby&lt;/code&gt; como &lt;em&gt;default&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python&lt;/code&gt;: aqui definimos que os testes serão executados usando o Python 2.7 e se desejarmos, também podemos adicionar outras versões do Python.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo&lt;/code&gt;: usado para executar o &lt;code&gt;Travis CI&lt;/code&gt; como permissão de usuário &lt;code&gt;root&lt;/code&gt;. Necessário caso você deseje instalar alguma dependência usando o comando &lt;code&gt;apt-get install nomepacote&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;script&lt;/code&gt;: nessa &lt;code&gt;tag&lt;/code&gt;, finalmente vamos executar nosso &lt;em&gt;script&lt;/em&gt; de teste.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dica: neste &lt;a href="http://lint.travis-ci.org/"&gt;link&lt;/a&gt; você pode colar o código do seu arquivo &lt;code&gt;.travis.yml&lt;/code&gt; para verificar se o mesmo está correto.&lt;/p&gt;
&lt;h3&gt;Adicionado uma badge para o repositório&lt;/h3&gt;
&lt;p&gt;O próximo passo é é adicionar uma &lt;code&gt;badge&lt;/code&gt; para o nosso repositório. Isso não é obrigatório, mas ajuda você, sua equipe e outras pessoas que se interessarem pelo seu repositório, a visualizar o &lt;em&gt;status&lt;/em&gt; da execução dos testes e verificar se seu código está funcionando corretamente.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial"&gt;&lt;img alt="Build Status" src="https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial.svg?branch=master" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Na tela onde você ativou o &lt;code&gt;Travis CI&lt;/code&gt; para seu reposiorio, clique no símbolo da engrenagem.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_28.png" /&gt;&lt;/p&gt;
&lt;p&gt;Na nova tela, podemos realizar algumas configurações, como por exemplo se o &lt;code&gt;Travis CI&lt;/code&gt; será executado para &lt;em&gt;push&lt;/em&gt; e para &lt;em&gt;pull requests&lt;/em&gt; e também podemos pegar a &lt;code&gt;badge&lt;/code&gt;. Ao clicarmos no botão logo ao lado do nome do repositório, uma janela será exibida.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_30.png" /&gt;&lt;/p&gt;
&lt;p&gt;Selecione a &lt;em&gt;branch&lt;/em&gt; a ser observada pelo Travis CI, escolha a opção &lt;code&gt;Markdown&lt;/code&gt; e copie o código que aparecerá na caixa de texto para o arquivo &lt;code&gt;README.md&lt;/code&gt; do seu repositório. O meu &lt;code&gt;README.md&lt;/code&gt; ficou assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;# Codigo Avulso Test Tutorial&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//travis-ci.org/mstuttgart/codigo-avulso-test-tutorial.svg?branch=master)](https://travis-ci.org/mstuttgart/codigo-avulso-test-tutorial)&lt;/span&gt;

&lt;span class="n"&gt;Tutorial&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;teste&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="err"&gt;á&lt;/span&gt;&lt;span class="n"&gt;rio&lt;/span&gt; &lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;para&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="err"&gt;ó&lt;/span&gt;&lt;span class="n"&gt;digo&lt;/span&gt; &lt;span class="n"&gt;Avulso&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//codigoavulso.com.br/).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com esses passos, quando algum &lt;em&gt;push&lt;/em&gt; ou &lt;em&gt;pull request&lt;/em&gt; for enviado ao repositório, o &lt;code&gt;Travis CI&lt;/code&gt; executará os testes, garantindo assim o funcionamento estável do nosso código e nos avisando caso alguma modificação venha causar algum erro em nossa aplicação.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_31.png" /&gt;&lt;/p&gt;
&lt;p&gt;Vale lembrar que o tempo para &lt;em&gt;deploy&lt;/em&gt; pode variar, dependendo da quantidade de testes do seu projeto, quantidade de dependências a serem instaladas e etc.&lt;/p&gt;
&lt;h4&gt;Conclusão&lt;/h4&gt;
&lt;p&gt;Aqui encerramos a segunda parte do nossa série de tutoriais sobre &lt;code&gt;Unittest&lt;/code&gt;. Eu decidi separar a série em 4 partes para que cada uma fosse explicada com mais detalhes mas sem deixar o tutorial muito extenso. O &lt;code&gt;Travis IC&lt;/code&gt; ainda possui muitas configurações não abordadas aqui, então se você se interessar, pode dar uma olhada na sua documentação oficial &lt;a href="https://docs.travis-ci.com/"&gt;aqui&lt;/a&gt;. No próximo tutorial veremos como utilizar o &lt;code&gt;Coveralls&lt;/code&gt; para gerar relatórios dos nossos testes.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Obrigado por ler até aqui!&lt;/p&gt;
&lt;p&gt;Até o próximo tutorial!&lt;/p&gt;</summary><category term="python"></category><category term="git"></category><category term="travis-ci"></category><category term="coveralls"></category><category term="landscape"></category><category term="unittest"></category></entry><entry><title>Python com Unittest, Travis CI, Coveralls e Landscape (Parte 1 de 4)</title><link href="http://codigoavulso.com.br/python-com-unittest-travis-ci-coveralls-e-landscape-parte-1-de-4.html" rel="alternate"></link><published>2016-04-12T01:42:18-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-04-12:python-com-unittest-travis-ci-coveralls-e-landscape-parte-1-de-4.html</id><summary type="html">&lt;p&gt;Durante o desenvolvimento de um software, tão importante quanto escrever um código organizado e que siga as melhores práticas, é garantir que o mesmo cumpra os requisitos a que ele se propõe. Em outras palavras, garantir que o software funcione de maneira adequada.&lt;/p&gt;
&lt;p&gt;O processo de testes de um software faz parte do seu desenvolvimento, porém muitas vezes ele é encarado como algo tedioso e desnecessário. Entretanto, todo bom desenvolvedor sabe que investir tempo escrevendo testes para seu software está longe de ser "desperdício de tempo". O processo de teste, quando feito por uma pessoa, além de sujeitos a falhas é tedioso e demorado. Tendo isso em mente, podemos lançar mão de ferramentas que realizarão o processo de teste por nós. Em Python, umas das ferramentes da bibloteca padrão destinada a teste é a &lt;code&gt;Unittest&lt;/code&gt;, que usaremos nesse tutorial.&lt;/p&gt;
&lt;p&gt;Nesta série de postagem, irei mostrar o passo-a-passo na criação de testes unitários para um pequeno projeto que vamos criar no github. Vou explicar como configurar a ferramenta &lt;a href="https://travis-ci.org/"&gt;Travis&lt;/a&gt;, que será responsável por executar os nossos testes no github. A ferramenta &lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt;, que mapeia nosso código, e nos indica o quanto dele está coberto por testes. E como bônus, adicionar ao nosso projeto o &lt;a href="https://landscape.io"&gt;Landscape&lt;/a&gt;, ferramenta que monitora a "saúde" do nosso código.&lt;/p&gt;
&lt;h3&gt;Iniciando nosso projeto&lt;/h3&gt;
&lt;p&gt;Inicialmente, criei no &lt;a href="https://github.com/"&gt;github&lt;/a&gt; um repositório que vai receber meu código e que posteriormente será configurado para rodar nossos testes. No meu caso, o repositório foi esse &lt;a href="https://github.com/mstuttgart/codigo-avulso-test-tutorial"&gt;codigo-avulso-test-tutorial&lt;/a&gt;. Após realizar o clone, criei a seguite estrutura de diretorios:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── codigo_avulso_test_tutorial
│   └── __init__.py
├── LICENSE
├── README.md
└── test
    └── __init__.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O diretório &lt;code&gt;codigo_avulso_test_tutorial&lt;/code&gt; receberá o código da nossa aplicação e o diretório &lt;code&gt;test&lt;/code&gt; receberá o código de teste.
O nosso projeto consiste de um grupo de classes representando figuras geométricas (quadrados, círculos e etc). Teremos uma classe base chamada &lt;code&gt;FiguraGeometrica&lt;/code&gt; que possui dois métodos, a saber: &lt;code&gt;get_area&lt;/code&gt; e &lt;code&gt;get_perimetro&lt;/code&gt;, sendo ambos metódos abstratos. Cada uma dessas classes filhas de &lt;code&gt;FiguraGeometrica&lt;/code&gt; irá possuir sua própria implementação desses métodos.&lt;/p&gt;
&lt;p&gt;Dentro do diretório &lt;code&gt;codigo_avulso_test_tutorial&lt;/code&gt;, irei criar os fontes do nosso código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch figura_geometrica.py circulo.py quadrado.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dentro do diretório &lt;code&gt;test&lt;/code&gt;, irei criar os fontes do nosso código de teste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch figura_geometrica_test.py circulo_test.py quadrado_test.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma observação importante é que os arquivos de teste devem ter o nome terminado em &lt;code&gt;test&lt;/code&gt;, para que o módulo de Unittest encontre os nossos arquivos de teste automaticamente. Após a criação dos arquivos, teremos a seguinte estrutura de diretório:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── codigo_avulso_test_tutorial
│   ├── circulo.py
│   ├── figura_geometrica.py
│   ├── __init__.py
│   └── quadrado.py
├── LICENSE
├── README.md
└── test
    ├── circulo_test.py
    ├── figura_geometrica_test.py
    ├── __init__.py
    └── quadrado_test.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Iniciemos agora a implementação do nosso projeto. Mas antes vamos dar uma olhada em alguns conceitos.&lt;/p&gt;
&lt;h3&gt;Test Driven Development (TDD)&lt;/h3&gt;
&lt;p&gt;Neste momento, leitor, você deve estar se perguntando: "Não deveríamos escrever primeiro o nosso código e depois escrever os testes?".&lt;/p&gt;
&lt;p&gt;Não necessariamente. O processo de escrever os testes antes do código é chamado de &lt;code&gt;TDD -  Test Driven Development&lt;/code&gt;. Segundo a &lt;a href="https://pt.wikipedia.org/wiki/Test_Driven_Development"&gt;wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Test Driven Development (TDD) ou em português Desenvolvimento guiado por testes é uma técnica de desenvolvimento de software que baseia em um ciclo curto de repetições: Primeiramente o desenvolvedor escreve um caso de teste automatizado que define uma melhoria desejada ou uma nova funcionalidade. Então, é produzido código que possa ser validado pelo teste para posteriormente o código ser refatorado para um código sob padrões aceitáveis. Kent Beck, considerado o criador ou o 'descobridor' da técnica, declarou em 2003 que TDD encoraja designs de código simples e inspira confiança[1] . Desenvolvimento dirigido por testes é relacionado a conceitos de programação de Extreme Programming, iniciado em 1999,[2] mas recentemente tem-se criado maior interesse pela mesma em função de seus próprios ideais.[3] Através de TDD, programadores podem aplicar o conceito de melhorar e depurar código legado desenvolvido a partir de técnicas antigas.[4]"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Criando o setup.py&lt;/h3&gt;
&lt;p&gt;Antes de começar a implementar o códigos de teste, vamos criar o arquivo &lt;code&gt;setup.py&lt;/code&gt;. Esse arquivo contém informações sobr e o nosso módulo python e facilita em muito a utilização dos testes. Então, vamos criar o arquivo &lt;code&gt;setup.py&lt;/code&gt; na pasta raiz do nosso projeto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch setup.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A estrutura do nosso projeto agora está assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── codigo_avulso_test_tutorial
│   ├── circulo.py
│   ├── figura_geometrica.py
│   ├── __init__.py
│   └── quadrado.py
├── LICENSE
├── README.md
├── setup.py
└── test
    ├── circulo_test.py
    ├── figura_geometrica_test.py
    ├── __init__.py
    └── quadrado_test.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Abra o &lt;code&gt;setup.py&lt;/code&gt; em um editor e adicione as informações conforme exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;codigo-avulso-test-tutorial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;codigo_avulso_test_tutorial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;test_suite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No código acima, &lt;code&gt;name&lt;/code&gt; representa o nome do seu projeto, &lt;code&gt;packages&lt;/code&gt; são os diretórios do seu projeto que possuem código fonte e &lt;code&gt;test_suite&lt;/code&gt; indica o diretório onde estão os fontes de teste. É importante declarar esse diretório pois o Unittest irá procurar dentro dele os arquivos de teste que iremos escrever.&lt;/p&gt;
&lt;h3&gt;Criando testes para a classe FiguraGeometrica&lt;/h3&gt;
&lt;p&gt;Agora, vamos usar a lógica do TDD. Primeiro criamos o código de teste de uma classe para em seguida criamos o código da mesma. Das classes que criamos, o arquivo &lt;code&gt;figura_geometrica.py&lt;/code&gt; servirá como uma classe base para as outras classes. Então vamos começar por elá.&lt;/p&gt;
&lt;p&gt;Abra o arquivo &lt;code&gt;figura_geometrica_test.py&lt;/code&gt; e seu editor preferido e adicione o código abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;codigo_avulso_test_tutorial.figura_geometrica&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FiguraGeometrica&lt;/span&gt;

&lt;span class="c1"&gt;# O nome da classe deve iniciar com a palavra Test&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestFiguraGeometrico&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Serve para incializar variavei que usaremos&lt;/span&gt;
    &lt;span class="c1"&gt;# globalmente nos testes&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Retorna uma NotImplementedError&lt;/span&gt;
    &lt;span class="c1"&gt;# O nome do metodo deve comecar com test&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Retorna uma NotImplementedError&lt;/span&gt;
    &lt;span class="c1"&gt;# O nome do metodo deve comecar com test&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_perimetro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como podemos observar no código acima, a seguinte linha:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_get_area&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realiza o seguinte teste. Com o objeto &lt;code&gt;self.fig&lt;/code&gt; criado no método &lt;code&gt;setUp()&lt;/code&gt;, tentamos chamar o método &lt;code&gt;test_get_perimetro&lt;/code&gt; da classe &lt;code&gt;FiguraGeometrica&lt;/code&gt;, porém ele verifica se ocorreu a exceção &lt;code&gt;NotImplementedError&lt;/code&gt;. Isso é feito porque a classe &lt;code&gt;FiguraGeometrica&lt;/code&gt; é uma classe abstrata e possui ambos os métodos &lt;code&gt;get_area&lt;/code&gt; e &lt;code&gt;get_perimetro&lt;/code&gt; vazios. Isso irá ficar mais claro quando adicionarmos o código da classe &lt;code&gt;FiguraGeometrica&lt;/code&gt;. Então, abra o arquivo &lt;code&gt;figura_geometrica.py&lt;/code&gt; em seu editor e vamos adicionar o seguinte código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Retorna a area da figura&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;

    &lt;span class="c1"&gt;# Retorna o perimetro da figura&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A class acima é bem simples. Ela possui um método que retorna a área e outro que retorna o perímetro da figura. Ambos são métodos &lt;em&gt;abstratos&lt;/em&gt;, ou seja, devem ser implementados nas classes filhas da classe &lt;code&gt;FiguraGeometrica&lt;/code&gt;. Se criarmos um objeto dessa classe e chamarmos um dos dois métodos, uma exceção do tipo &lt;code&gt;NotImplementedError&lt;/code&gt; será lançada, pois ambos os métodos possuem escopo vazio.&lt;/p&gt;
&lt;p&gt;Finalmente podemos executar o teste da nossa classe. Usando o terminal, no diretorio em que o arquivo &lt;code&gt;setup.py&lt;/code&gt; está, execute o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse nosso comando vai executar a nossa classe &lt;code&gt;TestFiguraGeometrica&lt;/code&gt;. Se tudo estiver correto, teremos a seguinte saída:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;running test
running egg_info
writing codigo_avulso_test_tutorial.egg-info/PKG-INFO
writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt
writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt
reading manifest file &amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;
writing manifest file &amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;
running build_ext
test_get_area (test.figura_geometrica_test.TestFiguraGeometrico) ... ok
test_get_perimetro (test.figura_geometrica_test.TestFiguraGeometrico) ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso apareça uma resposta diferente, dê uma olhada na própria saída do teste. Ele indica onde está o erro. Provavelmente, pode ter sido algum erro de digitação, pois os exemplos deste tutorial foram todos testados.&lt;/p&gt;
&lt;h3&gt;Criando testes para a classe Quadrado&lt;/h3&gt;
&lt;p&gt;Vamos criar agora outras classes que realmente fazem algo de útil e seus respectivos testes. Começando pela classe Quadrado, vamos escrever um teste para a mesma no arquivo &lt;code&gt;quadrado_test.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;codigo_avulso_test_tutorial.quadrado&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Quadrado&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestQuadrado&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Quadrado&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Verificamos se o resultado é o esperado&lt;/span&gt;
        &lt;span class="c1"&gt;# de acordo com a formula de area do quadrado&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mf"&gt;49.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mf"&gt;28.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em seguida, adicionamos o código da classe &lt;code&gt;Quadrado&lt;/code&gt; no arquivo &lt;code&gt;quadrado.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;figura_geometrica&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FiguraGeometrica&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Quadrado&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="c1"&gt;# Retorna a area do quadrado&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lado&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="c1"&gt;# Retorna o perimetro do quadrado&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lado&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim como fizemos no exemplo anterior, executamos os testes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se tudo estiver certo, teremos a seguinte saída.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;running test
running egg_info
writing codigo_avulso_test_tutorial.egg-info/PKG-INFO
writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt
writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt
reading manifest file &amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;
writing manifest file &amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;
running build_ext
test_get_area (test.quadrado_test.TestQuadrado) ... ok
test_get_perimetro (test.quadrado_test.TestQuadrado) ... ok
test_get_area (test.figura_geometrica_test.TestFiguraGeometrico) ... ok
test_get_perimetro (test.figura_geometrica_test.TestFiguraGeometrico) ... ok

----------------------------------------------------------------------
Ran 4 tests in 0.000s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma detalhe interessante a ser observado é que agora os testes da classe &lt;code&gt;Quadrado&lt;/code&gt; estão sendo executados junto com os testes da classe &lt;code&gt;FiguraGeometrica&lt;/code&gt; sem que fosse necessário alterar nenhuma configuração do projeto, ou adicionar algum novo diretório no arquivo &lt;code&gt;setup.py&lt;/code&gt;. Isso acontece por que usamos a sufixo &lt;code&gt;_test&lt;/code&gt; no nome dos nossos código fonte de teste e também adicionamos o diretório &lt;code&gt;test&lt;/code&gt; na tag &lt;code&gt;test_suite&lt;/code&gt; no arquivo &lt;code&gt;setup.py&lt;/code&gt;. Desse modo, quando executamos os testes, o módulo python &lt;code&gt;Unittest&lt;/code&gt; percorre o diretório &lt;code&gt;test&lt;/code&gt;, carrega automaticamente todos os arquivos com sufixo &lt;code&gt;_test&lt;/code&gt; e executa os testes dentro deles. Bacana não é?&lt;/p&gt;
&lt;h3&gt;Criando testes para a classe Circulo&lt;/h3&gt;
&lt;p&gt;Para encerrarmos o tutorial, vamos agora implementar os testes da classe Círculo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;codigo_avulso_test_tutorial.circulo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Circulo&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestCirculo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Circulo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Utilizamos a formula diretamente por conveniencia&lt;/span&gt;
        &lt;span class="c1"&gt;# já que math.pi e double e sendo assim, possui&lt;/span&gt;
        &lt;span class="c1"&gt;# muitas casas decimais&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;
        &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;perimetro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;perimetro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;
        &lt;span class="n"&gt;perimetro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;perimetro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E agora a classe Circulo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;figura_geometrica&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FiguraGeometrica&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circulo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="c1"&gt;# Retorna a area do circulo&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="c1"&gt;# Retorna o perimetro do circulo&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_perimetro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raio&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente, rodamos os testes agora com a presença da classe circúlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se tudo estiver certo, teremos a seguinte saída.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;running test
running egg_info
writing codigo_avulso_test_tutorial.egg-info/PKG-INFO
writing top-level names to codigo_avulso_test_tutorial.egg-info/top_level.txt
writing dependency_links to codigo_avulso_test_tutorial.egg-info/dependency_links.txt
reading manifest file &amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;
writing manifest file &amp;#39;codigo_avulso_test_tutorial.egg-info/SOURCES.txt&amp;#39;
running build_ext
test_get_area (test.quadrado_test.TestQuadrado) ... ok
test_get_perimetro (test.quadrado_test.TestQuadrado) ... ok
test_get_area (test.figura_geometrica_test.TestFiguraGeometrico) ... ok
test_get_perimetro (test.figura_geometrica_test.TestFiguraGeometrico) ... ok
test_get_area (test.circulo_test.TestCirculo) ... ok
test_get_perimetro (test.circulo_test.TestCirculo) ... ok

----------------------------------------------------------------------
Ran 6 tests in 0.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;Com os testes ok, só nos resta subir o código para o github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add --all
git commit -m &lt;span class="s2"&gt;&amp;quot;[NEW] Adicionado classes e testes&amp;quot;&lt;/span&gt;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse tutorial ficou bem extenso, mas espero que tenha sido útil pra vocês. No próxima parte do tutorial, vamos ver como configurar o Travis, para que ele execute nossos testes quando realizarmos um &lt;code&gt;push&lt;/code&gt; ou um &lt;code&gt;pull request&lt;/code&gt; para o github. Também veremos o Coveralls que emite relatórios do quando do seu código está coberto por testes, algo muito interessante para ver se um &lt;em&gt;software&lt;/em&gt; é bem testado.&lt;/p&gt;
&lt;p&gt;Os testes que escrevemos foram bem simples, apenas para fim de exemplo. Porém em uma aplicação séria, deve-se ter cuidado na hora de escrever os testes, de maneira a garantir que todas as possibilidades de erros sejam cobertas. A filosofia do TDD de escrever os testes antes do código da nossa aplicação, é algo que exige prática. Eu mesmo ainda não me sinto completamente a vontade seguindo esse fluxo de trabalho. Mas, escrever os testes primeiro te ajuda a manter seu código coerente e funcional, pois vocẽ vai precisar fazê-lo passar pelos testes.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Obrigado por ler até aqui. Até a próxima postagem!&lt;/p&gt;</summary><category term="python"></category><category term="git"></category><category term="travis-ci"></category><category term="coveralls"></category><category term="landscape"></category><category term="unittest"></category></entry><entry><title>Como configurar seu ambiente de desenvolvimento com Ubuntu Make</title><link href="http://codigoavulso.com.br/configurando-seu-ambiente-de-desenvolvimento-com-ubuntu-make.html" rel="alternate"></link><published>2016-03-29T18:46:01-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-03-29:configurando-seu-ambiente-de-desenvolvimento-com-ubuntu-make.html</id><summary type="html">&lt;p&gt;&lt;a href="https://wiki.ubuntu.com/ubuntu-make"&gt;Ubuntu Make&lt;/a&gt; é uma ferramenta de linha de comando que permite que você faça o download e instalação de das ferramentas de desenvolvimento mais populares, instalando também todas as suas dependências. O objetivo do &lt;a href="https://wiki.ubuntu.com/ubuntu-make"&gt;Ubuntu Make&lt;/a&gt; é possibilitar que, através de um comando, você tenha seu ambiente de desenvolvimento pronto para uso.
Ele possui suporte a instalação de IDE's de diversas linguagens, ferramentas para desenvolvimento web frontend(javascript e dart), backend (go and dart), mobile (java e android sdk) e etc.&lt;/p&gt;
&lt;h3&gt;Instalação&lt;/h3&gt;
&lt;p&gt;A instalação depende da inclusão do ppa abaixo. Então, basta abrir o termial e entrar com os comando a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make
sudo apt-get update
sudo apt-get install ubuntu-make
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Utilizando o Ubuntu Make&lt;/h3&gt;
&lt;h4&gt;Categorias&lt;/h4&gt;
&lt;p&gt;O &lt;a href="https://wiki.ubuntu.com/ubuntu-make"&gt;Ubuntu Make&lt;/a&gt; possui uma lista de plataformas suportadas que foram separadas por categorias para facilitar a vida do desenvolvedor na hora de instalar suas ferramentas preferidas.&lt;/p&gt;
&lt;p&gt;As categorias existentes podem ser visualizadas com o comando abaixo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;umake --help
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No presente momento, temos as seguites categorias. Novas ferramentas sempre estão sendo incluídas pela comunidade:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Categoria&lt;/th&gt;
&lt;th&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;games&lt;/td&gt;
&lt;td&gt;Ambiente de desenvolvimento de games&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;web&lt;/td&gt;
&lt;td&gt;Ambiente de desenvolvimento web&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;go&lt;/td&gt;
&lt;td&gt;Suporte a linguagem Go&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dart&lt;/td&gt;
&lt;td&gt;Ambiente de desenvolvimento Dartlang&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ide&lt;/td&gt;
&lt;td&gt;IDE genéricas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android&lt;/td&gt;
&lt;td&gt;Ambiente de desenvolvimento Android&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swift&lt;/td&gt;
&lt;td&gt;Suporte a linguagem Swift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scala&lt;/td&gt;
&lt;td&gt;Suporte a linguagem Scala&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rust&lt;/td&gt;
&lt;td&gt;Suporte a linguagem  Rust&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nodejs&lt;/td&gt;
&lt;td&gt;Versão estável do Nodejs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Se você desejar verificar as opções de uma sub-categoria, basta usar o comando a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;umake android --help
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você encontrará as seguintes opções:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Categoria&lt;/th&gt;
&lt;th&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;android-ndk&lt;/td&gt;
&lt;td&gt;Android NDK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android-sdk&lt;/td&gt;
&lt;td&gt;Android SDK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android-studio&lt;/td&gt;
&lt;td&gt;Android Studio (padrão)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;E assim você pode ir navegando nas subcategorias da ferramenta.&lt;/p&gt;
&lt;h4&gt;Exemplos de uso&lt;/h4&gt;
&lt;p&gt;O uso do Ubuntu Make é muito simples, o que o torna uma ferramenta muito valiosa. Como exemplo vamos realizar a instalação da IDE Netbeans. Basta executar o comando a seguir.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;umake ide netbeans
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basta aceitar os termos de uso, entrando com o texto "Eu aceito" e esperar download e instalação da IDE. Depois disso você já pode usá-la. As IDE e SDK's normalmente são instalados nbo diretório &lt;code&gt;.local/share/umake/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A instalação do ambiente de desenvolvimento do Android também segue o mesmo princípio, porém possui uma categoria própria.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;umake android android-sdk
umake android android-studio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instalando a versão estável do nodejs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;umake nodejs
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;Bom, esses são alguns exemplos de uso do Ubuntu Make. Para mais informações você pode consultar a página oficial &lt;a href="https://wiki.ubuntu.com/ubuntu-make"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Obrigado por ler e até o próximo post! t+&lt;/p&gt;</summary><category term="linux"></category><category term="tutorial"></category><category term="ubuntu make"></category><category term="desenvolvimento"></category></entry><entry><title>Dica de leitura: Guia Mangá de Banco de Dados</title><link href="http://codigoavulso.com.br/dica-de-leitura-guia-manga-de-banco-de-dados.html" rel="alternate"></link><published>2016-03-20T14:41:29-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-03-20:dica-de-leitura-guia-manga-de-banco-de-dados.html</id><summary type="html">&lt;p&gt;Quando pensamos em mangás, imediatamente nomes como Naruto, One Piece e Cavaleiros do Zodíaco vem a nossa mente. Eu, como todo fã de quadrinhos, sempre procuro ler obras novas ou que me despertem a curiosidade. Grande surpresa foi a minha quando descobri que a editora Novatec, conhecida por seus livros técnicos, havia publicado um mangá. Foi aí que juntei a curiosidade (e um pouco de dinheiro) e resolvi adquirir um exemplar.&lt;/p&gt;
&lt;p&gt;O mangá em questão é o livro &lt;code&gt;Guia Mangá de Banco de Dados&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_14.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Com 224 páginas, o livro de autoria de Mana Takashi e Shoko Azuma, é a versão brasileira da obra da editora &lt;code&gt;Ohmsha&lt;/code&gt; do Japão, e faz uso de uma narrativa típica de um mangá, com momentos muito cômicos sem abrir mão de uma história coerente (seguindo o conceito do mangá) e explicando muito bem a utilidade e o projeto de um banco de dados.&lt;/p&gt;
&lt;p&gt;No mangá, acompanhamos a jornada da princesa Ruruna e de seu amigo Cain em busca de uma solução para o problema de registro das informações de venda, produção de mercadorias e exportação do seu reino. Os pais de Ruruna querem apenas saber de se divertir e deixam nas mão da princesa a tarefa de organizar a bagunça. Nesse ponto, através da orientação da fada Tica, uma &lt;code&gt;Fada Mágica dos Bancos de Dados&lt;/code&gt; (apele para ela durante a prova de DB), Ruruna e Cain irão encontrar uma solução para o armazenamento e gerenciamento de informações sobre a produção do reino.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_15.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;O livro consegue de maneira muito interessante demonstrar todos os passos da implantação de um sistema, desde da análise do problemas do atual sistema de armazenamento de informações usado pelo reino, o estudo do porquê um banco de dados ser uma solução certeira até o plajenamento de como será o sistema, como definição das tabelas, atributos e etc. O livro aborda pontos como o problema com informações duplicadas e genreciamento de sistem descentralizado, onde não existe controle sobre a validade das informações inseridas no sistema.&lt;/p&gt;
&lt;p&gt;Todos os conceitos envolvendo banco de dados são abordados de uma maneira simples, porém prática. Conceitos como tabelas, Entidade-Relacionamento, consultas e atualização de dados são visitados pela fada Tica. Entre um conceito e outro, a história das personagens vão se desenvolvendo, contextualizando muito bem as lições ensinadas. Outro ponto positivo do livro são os desenhos, que apesar de simples, possuem traços suaves e agradáveis de ver.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_16.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Eu cursei a disciplina de Banco de Dados durante minha graduação e consegui relembrar muito pontos importantes sobre Banco de Dados e até mesmo aprender coisas novas, graças ao ponto de vista utilizado pelo livro (bem diferente do usado em uma sala de aula). Então, se você é um estudante de TI, um entusiasta da tecnologia, curte ler quadrinhos ou mesmo ficou curioso, eu recomendo o livro.&lt;/p&gt;
&lt;p&gt;Caso se interesse, o site da Novatec possui um link com amostra do livro  &lt;a href="http://novatec.com.br/download/amostras/amostra-manga-banco-de-dados.pdf"&gt;aqui&lt;/a&gt; e o mesmo pode ser adquirido &lt;a href="http://novatec.com.br/livros/mangabd/"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Este livro abriu minha curiosidade para comprar o guia mangá de outras temas e pretendo fazer análise de cada um deles assim que terminar de lê-los.&lt;/p&gt;
&lt;p&gt;É isso. Obrigado por ler e até a próximo &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;</summary><category term="livro"></category><category term="banco de dados"></category></entry><entry><title>Backup e Restore de um banco de dados PostgreSQL</title><link href="http://codigoavulso.com.br/backup-e-restore-de-um-banco-de-dados-postgresql.html" rel="alternate"></link><published>2016-03-18T11:59:51-03:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2016-03-18:backup-e-restore-de-um-banco-de-dados-postgresql.html</id><summary type="html">&lt;p&gt;Quando trabalhamos com alguma aplicações que faz uso de um banco de dados, muitas vezes precisamos realizar um &lt;code&gt;backup&lt;/code&gt; do nosso banco (antes de alguma atualização importante na aplicação) ou executar o &lt;code&gt;restore&lt;/code&gt; desse banco caso seja necessário.&lt;/p&gt;
&lt;p&gt;Eu trabalhei por um tempo desenvolvendo funcionalidades para o ERP Odoo. Esse ERP faz uso do PostgreSQL, e frequentemente eu precisava realizar &lt;code&gt;backup&lt;/code&gt; e &lt;code&gt;restore&lt;/code&gt; dos bancos que criava para atualizar as máquinas dos clientes. Então, segue abaixo o procedimento que eu utilizava.&lt;/p&gt;
&lt;h3&gt;Backup&lt;/h3&gt;
&lt;p&gt;Para realizar o &lt;code&gt;backup&lt;/code&gt;, primeiro precisamos logar como usuário &lt;code&gt;postgres&lt;/code&gt;. No terminal entre com:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo su - postgres
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma vez logado, voce pode reparar que o nome de usuário no terminal mudou. Caso seja necessário, é possível visualizar a lista de bancos existentes na sua máquina através do comando abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora, vamos realizar o backup do banco com o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_dump -Fc nome_banco &amp;gt; nome_banco_backup.dump
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim será criado um arquivo com a extensão &lt;code&gt;.dump&lt;/code&gt; no diretório &lt;code&gt;/var/lib/postgressql&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Também podemos incrementar o comando de modo a deixarmos registrado o dia, hora e minuto em que o &lt;code&gt;backup&lt;/code&gt; foi realizado, algo muito útil caso você precise realizar a restauração do banco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_dump -Fc nome_banco &amp;gt; nome_banco-backup-`date +%Y-%m-%d-%H-%M`.dump
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Restore&lt;/h3&gt;
&lt;p&gt;A restauração do banco é tão simples quanto o &lt;code&gt;backup&lt;/code&gt;.
Primeiramente, vamos criar uma entrada para o banco que será restaurado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;createdb banco_do_cliente_x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apenas uma observação, antes de criar uma entrada para o novo banco, é uma boa prática verificar se já não existe outro banco com o mesmo nome. Isso pode ser feito com o comando &lt;code&gt;psql -l&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Caso o seu objetivo seja mesmo substituir o banco &lt;code&gt;banco_do_cliente_x&lt;/code&gt;, você pode usar o comando abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dropdb banco_do_cliente_x
createdb banco_do_cliente_x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente realizamos o &lt;code&gt;restore&lt;/code&gt; do banco com o comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_restore -d banco_do_cliente_x banco_backup.dump
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vale lembrar que para executar o comando acima, o arquivo .dump deve estar no diretório &lt;code&gt;/var/lib/postgressql&lt;/code&gt; (mova o arquivo para esse diretório caso ele ainda não esteja).&lt;/p&gt;
&lt;p&gt;É isso pessoal. Esse dica já me salvou muito vezes e espero que seja útil para vocês também.&lt;/p&gt;
&lt;p&gt;Até o próximo post!&lt;/p&gt;</summary><category term="linux"></category><category term="tutorial"></category><category term="banco de dados"></category><category term="backup"></category><category term="restore"></category><category term="postgresql"></category></entry><entry><title>Como criar diretórios e arquivos usando expressões regulares</title><link href="http://codigoavulso.com.br/como-criar-diretorios-e-arquivos-usando-expressoes-regulares.html" rel="alternate"></link><published>2014-08-30T05:47:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-08-30:como-criar-diretorios-e-arquivos-usando-expressoes-regulares.html</id><summary type="html">&lt;p&gt;Olá pessoal, tudo bem? Todo programador linux sabe como o uso do terminal pode ser uma ajuda insubstituível na realização de algumas tarefas. Neste post eu irei compartilhar algumas coisa que descobri usando o terminal.&lt;/p&gt;
&lt;h3&gt;Exemplo 1&lt;/h3&gt;
&lt;p&gt;Para começar, quando desejamos criar um diretório pelo terminal, usamos o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir nome_do_diretorio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Algo muito prático. Mas e se precisarmos criar 10 diretórios com o seguinte formato de nome: &lt;code&gt;minha_pasta_1&lt;/code&gt;, &lt;code&gt;minha_pasta_2&lt;/code&gt;, &lt;code&gt;minha_pasta_3&lt;/code&gt;, ..., &lt;code&gt;minha_pasta_10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Certamente a realização dessa tarefa pelo ambiente gráfico é algo muito cansativo e lento. Então vamos fazer uso do terminal do linux para resolver essa situação.
Você talvez não saiba (eu pelo menos não sabia.. hehe), que o comando &lt;code&gt;mkdir&lt;/code&gt; aceita expressões regulares. Então, vamos usar-las para resolver nosso problema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir minha_pasta_&lt;span class="o"&gt;{&lt;/span&gt;1-10&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dentro da &lt;code&gt;{}&lt;/code&gt;, nós inserimos a expressão regular desejada. A expressão &lt;code&gt;{1..10}&lt;/code&gt; irá criar &lt;code&gt;10&lt;/code&gt; diretórios seguindo o padrão de nomes desejado.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_11.png" /&gt;&lt;/p&gt;
&lt;p&gt;Abaixo temos outros exemplos de uso das expressões regulares.
Trata-se de um comando útil para quando desejamos criar um grande numero de arquivos cujo nomes seguem uma determinada regra.&lt;/p&gt;
&lt;p&gt;Para deletarmos os diretorios que acabamos de criar também podemos usar a mesma expressão regular.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf minha_pasta_&lt;span class="o"&gt;{&lt;/span&gt;1-10&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Exemplo 2&lt;/h3&gt;
&lt;p&gt;Vamos criar 100 arquivos com o seguinte formato de nome: &lt;code&gt;file_”numero_do_arquivo”.txt&lt;/code&gt;. Basta no terminal, usarmos o comando &lt;code&gt;touch&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch file_&lt;span class="o"&gt;{&lt;/span&gt;1-100&lt;span class="o"&gt;}&lt;/span&gt;.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apos executarmos o comando, &lt;code&gt;100&lt;/code&gt; arquivos do tipo &lt;code&gt;.txt&lt;/code&gt; serão criados seguindo a regra de nome que desejamos.&lt;/p&gt;
&lt;h3&gt;Exemplo 3&lt;/h3&gt;
&lt;p&gt;Vamos criar um conjunto de arquivos cujos nomes seguem o formato: &lt;code&gt;file_a.txt&lt;/code&gt;, &lt;code&gt;file_b.txt&lt;/code&gt;, … &lt;code&gt;file_z.txt&lt;/code&gt;. Basta executar o seguinte comando no terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch file_&lt;span class="o"&gt;{&lt;/span&gt;a-z&lt;span class="o"&gt;}&lt;/span&gt;.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Resultado:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_12.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Exemplo 4&lt;/h3&gt;
&lt;p&gt;Vamos criar um conjunto de arquivo cujo nomes seguem o seguinte formato: &lt;code&gt;file_a1.txt&lt;/code&gt;, &lt;code&gt;file_a2.txt&lt;/code&gt;, &lt;code&gt;file_a3.txt&lt;/code&gt;, …, &lt;code&gt;file_a9.txt&lt;/code&gt;, &lt;code&gt;file_b1.txt&lt;/code&gt;, &lt;code&gt;file_b2.txt&lt;/code&gt;, …, &lt;code&gt;file_b9.txt&lt;/code&gt;. Basta executar o seguinte comando no terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch file_&lt;span class="o"&gt;{&lt;/span&gt;a-b&lt;span class="o"&gt;}{&lt;/span&gt;1-9&lt;span class="o"&gt;}&lt;/span&gt;.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A seguir temos os arquivos que foram criados pela execução da expressão regular.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_13.png" /&gt;&lt;/p&gt;
&lt;p&gt;Como podemos perceber, dentro da &lt;code&gt;{}&lt;/code&gt; podemos adicionar qualquer expressão regular.
Mais um exemplo com a criação de diretórios.&lt;/p&gt;
&lt;h3&gt;Exemplo 5&lt;/h3&gt;
&lt;p&gt;Vamos criar um conjunto de 10 diretórios com o nome no formato: &lt;code&gt;folder_10&lt;/code&gt;, &lt;code&gt;folder_11&lt;/code&gt;, &lt;code&gt;folder_12&lt;/code&gt;, &lt;code&gt;folder_19&lt;/code&gt;, &lt;code&gt;folder_20&lt;/code&gt;, &lt;code&gt;folder_21&lt;/code&gt;, ..., &lt;code&gt;folder_29&lt;/code&gt;, ..., &lt;code&gt;folder_90&lt;/code&gt;, ..., &lt;code&gt;folder_99&lt;/code&gt;. Basta executar o seguinte comando no terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir folder_&lt;span class="o"&gt;{&lt;/span&gt;1-9&lt;span class="o"&gt;}{&lt;/span&gt;0-9&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É isso pessoal. Espero que a dica seja útil para vocês. Até o próximo post.&lt;/p&gt;</summary><category term="linux"></category><category term="tutorial"></category><category term="expressão regular"></category></entry><entry><title>QChip8 Emulator: meu primeiro emulador</title><link href="http://codigoavulso.com.br/qchip8-emulator-meu-primeiro-emulador.html" rel="alternate"></link><published>2014-06-24T20:11:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-24:qchip8-emulator-meu-primeiro-emulador.html</id><summary type="html">&lt;p&gt;Se há algo na área de games que sempre me chamou a atenção, sem dúvida, são os emuladores. Sempre achei fantástico a ideia de poder rodar jogos e aplicativos de um sistema em outro sistema totalmente diferente. Então, semanas atrás resolvi estudar um pouco sobre esse tipo de aplicação. Após algumas pesquisas, vi que criar um emulador para o CHIP8 é um ótimo passo para quem não possui experiência em desenvolvimento de emuladores, devido a sua simplicidade.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_8.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/CHIP-8"&gt;CHIP8&lt;/a&gt; é uma linguagem de programação interpretada usada na década de 70 nos computadores COSMAP VIP e TELMAC 1800. Os programas em CHIP8 são executados sobre uma máquina virtual própria. Assim, o emulador que implementei é na verdade um emulador dessa máquina virtual, e não dos computadores onde ela rodava. A linguagem foi muito usada por entusiastas em desenvolvimento de games.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_9.png" /&gt;&lt;/p&gt;
&lt;p&gt;O &lt;a href="https://github.com/mstuttgart/qchip8-emulator"&gt;QChip8 Emulator&lt;/a&gt; foi implementado usando C++ para as rotinas de emulação e Qt para a interface. O emulador ainda não tem som, o que não atrapalha em nada a diversão já que o som do CHIP8 original era um simples tom.  Todos os jogos do CHIP8 são em preto-e-branco, então implementei vários temas de cores para quem não gostar do tema clássico. As Roms dos jogos do CHIP8 são gratuitas e podem ser encontrados fazendo uma simples busca no Google por &lt;code&gt;"CHIP8 roms"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_10.png" /&gt;&lt;/p&gt;
&lt;p&gt;Futuramente pretendo escrever uma série de tutoriais demonstrando os passos para criar um emulador do CHIP8 (e quem sabe, de outros emuladores também).&lt;/p&gt;
&lt;p&gt;Se você já tem experiência em programação é não quer esperar meus tutoriais, segue os links que usei para estudar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.multigesture.net/articles/how-to-write-an-emulator-chip-8-interpreter/"&gt;How to write an emulator chip 8 interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.emulator101.com.s3-website-us-east-1.amazonaws.com/introduction-to-chip-8/"&gt;Introduction to chip 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devernay.free.fr/hacks/chip8/C8TECH10.HTM"&gt;Cowgod's Chip 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aqui você pode conferir mais informações do &lt;a href="https://github.com/mstuttgart/qchip8-emulator"&gt;QChip8 Emulator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Segue o link do emulador para quem desejar estudá-lo e/ou usá-lo: clique &lt;a href="https://github.com/mstuttgart/qchip8-emulator"&gt;aqui&lt;/a&gt;.
Futuramente pretendo também disponibilizar uma pacote &lt;code&gt;.deb&lt;/code&gt; e &lt;code&gt;.rmp&lt;/code&gt; para distribuições Linux.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Até a próxima!&lt;/p&gt;</summary><category term="emulador"></category><category term="projeto"></category><category term="software"></category></entry><entry><title>Icones para Ubuntu, Linux Mint e derivados</title><link href="http://codigoavulso.com.br/icones-para-ubuntu-linux-mint-e-derivados.html" rel="alternate"></link><published>2014-06-20T09:34:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-20:icones-para-ubuntu-linux-mint-e-derivados.html</id><summary type="html">&lt;h3&gt;Numix Icon Theme Circle&lt;/h3&gt;
&lt;p&gt;Versão do tema de ícone &lt;a href="https://numixproject.org/"&gt;Numix&lt;/a&gt; com ícones arredondados.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Inicialmente, adicionamos o repositório do tema. Abra o terminal e digite:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:numix/ppa
sudo apt-get update
sudo apt-get install numix-icon-theme-circle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para conhecer a página do projeto, clique &lt;a href="https://numixproject.org/"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Ardis Icon Theme&lt;/h3&gt;
&lt;p&gt;Um dos meus temas de ícones preferidos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_6.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:noobslab/icons
sudo apt-get update
sudo apt-get install ardis-icons
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para conhecer a página do projeto, clique &lt;a href="https://github.com/skwerlman/Ardis-icon-theme"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Humanity Colors Icon Theme&lt;/h3&gt;
&lt;p&gt;Temas de ícones Humanity em diversas cores.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_7.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:ravefinity-project/ppa
sudo apt-get update
sudo apt-get install humanity-colors
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para conhecer a página do projeto, clique &lt;a href="http://www.ravefinity.com/p/humanity-colors-icon-theme.html"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Até a próxima.&lt;/p&gt;</summary><category term="linux"></category><category term="ubuntu"></category><category term="linux mint"></category><category term="icones"></category><category term="ardis"></category><category term="numix"></category></entry><entry><title>Operadores Bit-a-Bit (Parte 5 de 5): Operador SHIFT</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-5-de-5-operador-shift.html" rel="alternate"></link><published>2014-06-19T09:30:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-19:operadores-bit-a-bit-parte-5-de-5-operador-shift.html</id><summary type="html">&lt;p&gt;Neste ultimo tutorial sobre os operadores Bit-a-Bit, vamos falar sobre o operador &lt;code&gt;SHIFT&lt;/code&gt;. O operador SHIFT serve para deslocarmos os bits de um número para esquerda ou para direita uma determinada quantidade de vezes. Embora pareça algo sem simples, esse deslocamento possui muitas aplicações. É o que veremos a seguir.&lt;/p&gt;
&lt;h4&gt;SHIFT Esquerdo (&amp;lt;&amp;lt;)&lt;/h4&gt;
&lt;p&gt;O SHIFT Esquerdo (&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;) desloca para esquerda todos os bits de um número um determinado número de vezes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Valor de saída é &lt;code&gt;10&lt;/code&gt; decimal ou &lt;code&gt;00001010&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Ao observarmos o valor de &lt;code&gt;c&lt;/code&gt;, percebemos que ele dobrou. Esse detalhe está relacionado com uma das aplicações mais comuns do operador &lt;code&gt;SHIFT Esquerdo&lt;/code&gt;: a multiplicação.&lt;/p&gt;
&lt;p&gt;Toda vez que utilizamos o operador &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; obtemos como resultado um valor equivalente ao operando multiplicado por 2 elevado ao número de deslocamentos, ou seja:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x &amp;lt;&amp;lt; n* é o mesmo que x * 2^n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As operações de multiplicação e divisão são operações custosas para o processador, sendo uma das que levam mais tempo (ou ciclos) para serem completadas. Quando necessitamos executar operações de multiplicação por valores que são potência de 2, podemos usar o operador &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; que é uma operação mais rápida que a multiplicação usando o operador &lt;code&gt;*&lt;/code&gt; e nos devolve o mesmo resultado.&lt;/p&gt;
&lt;h4&gt;SHIFT Direito (&amp;gt;&amp;gt;)&lt;/h4&gt;
&lt;p&gt;O SHIFT para direita (&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;) desloca para direita todos os bits de um número um determinado número de vezes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A saída é &lt;code&gt;2&lt;/code&gt; decimal ou &lt;code&gt;00000010&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Assim como o SHIFT Esquerdo, o &lt;code&gt;SHIFT Direito&lt;/code&gt; pode realizar operações aritméticas, porém neste caso ele realiza a divisão (inteira) do operando por uma potência de 2. No exemplo acima podemos perceber que a variável c recebeu o parte inteira da divisão de &lt;code&gt;5&lt;/code&gt; por &lt;code&gt;2^1&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x &amp;gt;&amp;gt; n* é o mesmo que x / 2^n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O operador SHIFT ainda possui diversos exemplos de uso, então não deixe de procurá-los.&lt;/p&gt;
&lt;p&gt;Espero que essa série de tutoriais tenha lhe ajudado a entender mais sobre essas ferramentas interessante s que são os operadores Bit-a-Bit.&lt;/p&gt;
&lt;p&gt;Obrigado por ler! Até o próximo post.
t+&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="tutorial"></category><category term="operador bit-a-bit"></category><category term="binario"></category></entry><entry><title>Operadores Bit-a-Bit (Parte 4 de 5): Operador NOT</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-4-de-5-operador-not.html" rel="alternate"></link><published>2014-06-09T20:31:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-09:operadores-bit-a-bit-parte-4-de-5-operador-not.html</id><summary type="html">&lt;p&gt;Mais um capítulo do nosso tutorial sobre operadores lógicos e operações bit-a-bit.
Hoje veremos o operador &lt;code&gt;NOT&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Operador NOT&lt;/h4&gt;
&lt;p&gt;O operador &lt;code&gt;NOT (~)&lt;/code&gt;, talvez seja o mais simples de todos. Diferente dos outros operadores Bit-a-Bit, o operador NOT opera apenas sobre um operando, invertendo o estado de cada bit, ou seja, se o bit for &lt;code&gt;1&lt;/code&gt; ele será mudado para &lt;code&gt;0&lt;/code&gt;, e vice-versa.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Bit&lt;/th&gt;
&lt;th align="center"&gt;Saída&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Exemplo&lt;/h4&gt;
&lt;p&gt;Abaixo temos um exemplo de uso do operador &lt;code&gt;NOT&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída igual a &lt;code&gt;250&lt;/code&gt; decimal ou &lt;code&gt;11111010&lt;/code&gt; binário.&lt;/p&gt;
&lt;p&gt;Um dos mais comuns usos do operador NOT é para encontrar o &lt;code&gt;complemento de 2&lt;/code&gt; de um número binário. Em um número binário de 8 bits conseguimos representar valores de &lt;code&gt;0&lt;/code&gt; a &lt;code&gt;255&lt;/code&gt; (&lt;code&gt;11111111&lt;/code&gt; em binário), considerando que estamos trabalhando com número absolutos, ou seja, maiores ou iguais a zero . Entretanto, quando desejamos representar valores negativos e positivos usando valores binários devemos usar o complemento de 2. Desse modo, o nosso intervalo de representação de 8 bits diminui o valor positivo máximo, mas por outro lado, conseguimos representar números negativos. Sendo assim nossos valores vão de &lt;code&gt;-128&lt;/code&gt; a &lt;code&gt;127&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Exemplo 2&lt;/h4&gt;
&lt;p&gt;Para encontrarmos o &lt;code&gt;complemento de 2&lt;/code&gt; (o valor negativo) de um número usando o operador NOT, seguimos os seguintes passos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída igual a &lt;code&gt;-5&lt;/code&gt; decimal ou &lt;code&gt;11111011&lt;/code&gt; binário.&lt;/p&gt;
&lt;p&gt;Os números em complemento de 2, quando são negativos, sempre possuem seu bit mais significativo (bit mais à direita) com o valor &lt;code&gt;1&lt;/code&gt;. A principal vantagem de usarmos essa técnica é que as regras para as operação de soma e de subtração são as mesmas, ou seja, se desejamos subtrair um número &lt;code&gt;b&lt;/code&gt; de outro número &lt;code&gt;a&lt;/code&gt;, basta simplesmente somar-lo ao complemento de 2 de &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Até o próximo tutorial.&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="tutorial"></category><category term="operador bit-a-bit"></category><category term="binario"></category></entry><entry><title>Operadores Bit-a-Bit (Parte 3 de 5): Operador XOR</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-3-de-5-operador-xor.html" rel="alternate"></link><published>2014-06-09T19:35:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-09:operadores-bit-a-bit-parte-3-de-5-operador-xor.html</id><summary type="html">&lt;p&gt;Continuando a nossa série de tutoriais, hoje veremos o operador XOR (&lt;code&gt;^&lt;/code&gt;) ou como é conhecido, &lt;code&gt;OU-Exclusivo&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Operador XOR&lt;/h4&gt;
&lt;p&gt;Como o próprio nome sugere, o &lt;code&gt;XOR&lt;/code&gt; é um tipo especial de operação OR.
&lt;code&gt;XOR (^)&lt;/code&gt; é um operando binário que executa uma operação &lt;code&gt;XOR (ou-exclusivo)&lt;/code&gt; com cada par de bits dos operandos. O bit resultante é &lt;code&gt;1&lt;/code&gt; apenas se os dois bits operandos forem diferentes; caso contrário o resultante é &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Bit 1&lt;/th&gt;
&lt;th align="left"&gt;Bit 2&lt;/th&gt;
&lt;th align="left"&gt;Saída&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Exemplo&lt;/h4&gt;
&lt;p&gt;O &lt;code&gt;operador XOR&lt;/code&gt; utilizado quando desejamos uma verificar se cada um dos bits de um par de operandos são realmente diferentes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00001001&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A saída é &lt;code&gt;12&lt;/code&gt; decimal ou &lt;code&gt;00001100&lt;/code&gt; binário.&lt;/p&gt;
&lt;p&gt;Eu não encontrei exemplos mais genéricos de uso do XOR. Se você, leitor, souber algum não deixe de postar nos comentários.&lt;/p&gt;
&lt;p&gt;Obrigado por ler e até o próximo tutorial.&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="tutorial"></category><category term="operador bit-a-bit"></category><category term="binario"></category></entry><entry><title>Operadores Bit-a-Bit (Parte 2 de 5): Operador OR</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-2-de-5-operador-or.html" rel="alternate"></link><published>2014-06-05T11:19:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-05:operadores-bit-a-bit-parte-2-de-5-operador-or.html</id><summary type="html">&lt;p&gt;No tutorial anterior, realizamos um estudo sobre o &lt;code&gt;operador AND&lt;/code&gt; e seus exemplos de uso. Se você ainda não leu, veja aqui. Agora vamos prosseguir estudando o &lt;code&gt;operador OR&lt;/code&gt; e mostrando alguns exemplos de uso do mesmo.&lt;/p&gt;
&lt;h4&gt;Operador OR&lt;/h4&gt;
&lt;p&gt;O &lt;code&gt;operador OR (|)&lt;/code&gt; é um operador binário que executa uma operação &lt;code&gt;OR&lt;/code&gt; com cada par de bits dos operandos. O bit resultante é &lt;code&gt;0&lt;/code&gt; se os dois bits operandos forem 0; caso contrário o bit resultante é &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Bit 1&lt;/th&gt;
&lt;th align="left"&gt;Bit 2&lt;/th&gt;
&lt;th align="left"&gt;Saída&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00001001&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A saída é &lt;code&gt;13&lt;/code&gt; em decimal ou &lt;code&gt;00001101&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;De maneira semelhante ao operador AND, o operador OR também pode ser usado para definir um valor específico para um determinado bit. Só que ao contrário do AND, que era usado para &lt;code&gt;"desligar"&lt;/code&gt; um dado bit, o operador OR é usado para &lt;code&gt;"ligá-lo"&lt;/code&gt;, ou seja, torna-lo igual a &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Exemplo&lt;/h4&gt;
&lt;p&gt;Vamos ligar o quarto bit do valor armazenado em a;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;b00001000&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A saída é &lt;code&gt;13&lt;/code&gt; decimal ou &lt;code&gt;00001101&lt;/code&gt; binário.&lt;/p&gt;
&lt;p&gt;Observe que após essa operação, nós conseguimos &lt;code&gt;"ligar"&lt;/code&gt; o quarto bit enquanto todos os outros bits continuam com seus valores iniciais.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Esse tutorial foi mais simples porque a maior parte dos detalhes e explicações eu já havia adicionado na parte 1.&lt;/p&gt;
&lt;p&gt;Até o próximo tutorial.&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="operador bit-a-bit"></category><category term="tutorial"></category><category term="binario"></category></entry><entry><title>Operadores Bit-a-Bit (Parte 1 de 5): Operador AND</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-1-de-5-operador-and.html" rel="alternate"></link><published>2014-06-04T19:30:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-04:operadores-bit-a-bit-parte-1-de-5-operador-and.html</id><summary type="html">&lt;p&gt;Operadores Bit-a-bit são usados quando desejamos manipular diretamente os bits de um determinado número. Seu uso é muito fundamental em aplicações onde precisamos lidar diretamente com bits, como aplicações envolvendo hardware (Arduino, por exemplo) e até mesmo emuladores. Os exemplos estão em C++, mas podem ser facilmente adaptados para outras linguagens. Para fins de organização, pretendo dividir os tutoriais em 5 partes, cada um deles abordando um operador (AND, OR, XOR, NOT e SHIFT) e mostrando exemplos de uso.&lt;/p&gt;
&lt;p&gt;Para se trabalhar com os operadores bit-a-bit, nossos dados devem ser valores numéricos, não-negativos e inteiros. As variáveis devem ser do tipo unsigned, como por exemplo, unsigned short ( 16 bits ) e unsigned char (8 bits ou 1 byte), dependendo do número de bits que você precisar.&lt;/p&gt;
&lt;h4&gt;Operador AND&lt;/h4&gt;
&lt;p&gt;O operador &lt;code&gt;AND (&amp;amp;)&lt;/code&gt; é um operando binário que executa uma operação AND com cada par de bits dos operandos. O bit resultante é 1 se os dois bits operandos forem 1; caso contrário o resultante é 0.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Bit 1&lt;/th&gt;
&lt;th align="center"&gt;Bit 2&lt;/th&gt;
&lt;th align="center"&gt;Saida&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 00001001&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída: &lt;code&gt;1&lt;/code&gt; ou &lt;code&gt;00000001&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;O operador AND também pode ser usado quando desejamos verificar se um determinado bit de um operando é 0 ou 1.  No exemplo abaixo, vamos verificar se o terceiro bit do valor armazenado em a é 0 ou 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 00000100&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída: &lt;code&gt;4&lt;/code&gt; ou &lt;code&gt;00000100&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Porque usamos o valor 4 para a variável &lt;code&gt;b&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Note que o valor 4 possui todos os seus bits iguais a 0 com exceção do terceiro bit, que é o que desejamos. Sempre devemos escolher um número que possua o bit &lt;code&gt;1&lt;/code&gt; na posição dos bit(s) que desejamos verificar se é &lt;code&gt;0&lt;/code&gt; ou &lt;code&gt;1&lt;/code&gt;. Se o nosso objetivo fosse encontrar o valor do quarto bit de a, deveríamos fazer&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00001000&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída: &lt;code&gt;8&lt;/code&gt; ou &lt;code&gt;00000000&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Com exemplo acima percebemos que, se o o digito em questão for &lt;code&gt;1&lt;/code&gt;, o resultado de &lt;code&gt;a &amp;amp; b&lt;/code&gt; será igual a ao valor armazenado em &lt;code&gt;b&lt;/code&gt;. Se o digito for &lt;code&gt;0&lt;/code&gt;, o resultado da operação &lt;code&gt;a &amp;amp; b&lt;/code&gt; será &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Outra uso do operador &lt;code&gt;AND&lt;/code&gt; é quando desejamos "desligar", ou seja, tornar igual a &lt;code&gt;0&lt;/code&gt; um determinado bit do número.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos supor que desejamos desligar o terceiro bit de a. Basta realizarmos uma operação &lt;code&gt;AND&lt;/code&gt; com um operando que possua o valor &lt;code&gt;0&lt;/code&gt; no digito que desejamos "desligar" e &lt;code&gt;1&lt;/code&gt; nos demais bits.&lt;/p&gt;
&lt;h4&gt;Exemplo&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;251&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 11111011&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realizando o &lt;code&gt;AND&lt;/code&gt;, teremos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saida: &lt;code&gt;1&lt;/code&gt; ou &lt;code&gt;0000 0001&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Como podemos observar, conseguimos "desligar" o terceiro bit do valor de &lt;code&gt;a&lt;/code&gt;.
Uma pergunta que pode surgir é como saber que valor usar em &lt;code&gt;b&lt;/code&gt;. No exemplo acima utilizamos &lt;code&gt;b = 251&lt;/code&gt;, mas como sabemos que esse valor daria certo. A ideia aqui é se basear na representação binária e não na decimal, ou seja, você deve encontrar um valor em binário que satisfaça a operação que você deseja (no nosso caso, o valor &lt;code&gt;11111011&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Uma maneira de deixar esse raciocínio mais intuitivo é usar um valor diretamente na base binária ao invés da base decimal. No C++, a operação que fizemos logo acima ficaria assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;b11111011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 251&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saida: &lt;code&gt;1&lt;/code&gt; ou &lt;code&gt;00000001&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Lembrando que o número de bits não deve ultrapassar a capacidade do tipo da variável. Acima utilizamos &lt;code&gt;unsigned char&lt;/code&gt; que tem capacidade para &lt;code&gt;8 bits&lt;/code&gt;. Se armazenarmos um valor que necessita de mais de 8 bits, esse valor será truncado (quebrado) para que possa ser armazenado em 8 bits. Provavelmente você terá uma valor errado como saída, então sempre se atente a isso, ok?&lt;/p&gt;
&lt;p&gt;Com este tutorial, tentei mostrar algumas exemplos de uso do operador AND. É claro que existem muitos outros caso de uso, mas tentei focar aqui no mais básico.&lt;/p&gt;
&lt;p&gt;É isso pessoal! Obrigado por ler e até o próximo &lt;em&gt;post&lt;/em&gt;!
t+&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="tutorial"></category><category term="binario"></category><category term="operador bit-a-bit"></category></entry><entry><title>Ambiente de desenvolvimento: Arduino + Sublime Text</title><link href="http://codigoavulso.com.br/ambiente-de-desenvolvimento-arduino-sublime-text.html" rel="alternate"></link><published>2014-06-03T17:18:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-03:ambiente-de-desenvolvimento-arduino-sublime-text.html</id><summary type="html">&lt;p&gt;Há algum tempo, tipo o prazer de participar de um minicurso abordando o básico sobre o desenvolvimento usando a plataforma Arduino. Após a instalação das bibliotecas necessárias, também foi necessário instalar a Arduino IDE, um ambiente de desenvolvimento próprio para programação nessa plataforma.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_3.png" /&gt;&lt;/p&gt;
&lt;p&gt;Apesar da IDE oferecer suporte a todos os recursos do Arduino, o seu editor de texto era simples demais, sem funções que são comuns a muitos editores, como auto-completar, fechamento automático de &lt;em&gt;{}&lt;/em&gt; e entre outras coisas básicas. Uma vez que eu estou acostumado a editores de texto mais avançados, acabei me sentindo bastante desconfortável e parti em busca de outra alternativa. Foi então que descobri a combinação &lt;code&gt;SublimeText + Stino&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O Sublime Text um editor de texto e IDE bem conhecido por programadores. Possui muitos recursos bacanas como auto-completar, suporte a múltiplas linguagens de programação e uma infinidade de plugins, temas e possui versões para diversos sistemas operacionais. O Sublime Text pode ser baixado aqui. Para Linux, temos um pacote com a extensão .deb. Para instalá-lo basta dar dois cliques no arquivo, inserir a senha de administrador e seguir com a instalação normalmente.&lt;/p&gt;
&lt;p&gt;Com o Sublime Text instalado, vamos dar prosseguimento a instalação do plugin Stino, para suporte ao Arduino.&lt;/p&gt;
&lt;p&gt;Inicialmente, vamos instalar o plugin que permite a instalação de packages no Sublime Text. Caso já o tenho instalado, pode ignorar estas etapas.&lt;/p&gt;
&lt;p&gt;Execute o Sublime Text e vá em:  &lt;code&gt;View -&amp;gt; Show Console&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Na área inferior da janela do Sublime Text, irá aparecer um campo de texto onde você deve colar o código encontrado aqui, de acordo com a versão do Sublime Text. Após copiar e colar o texto no campo de texto do Sublime Text, tecle Enter. Após a instalação, reinicie o Sublime Text.&lt;/p&gt;
&lt;p&gt;Depois de reiniciar o Sublime Text, clique no menu: &lt;code&gt;Preferences -&amp;gt; Package Control&lt;/code&gt;.
No campo de texto Package Control, digite: &lt;code&gt;Install Package&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Aguarde alguns segundo e irá aparecer outro campo de texto para você entrar com o nome do package.
Digite Arduino e irá aparecer um package chamado &lt;code&gt;Arduino Like IDE&lt;/code&gt;. Selecione-o e aguarde alguns segundos para a instalação completar (você pode verificar o progresso da instalação na área inferior da janela do Sublime Text). Após completada a instalação, reinicie o Sublime Text.&lt;/p&gt;
&lt;p&gt;Depois de reiniciar o Sublime Text, vá em Preferences e selecione a opção &lt;code&gt;Show Arduino Menu&lt;/code&gt; (se já não estiver selecionado). Fazendo isso, um novo menu chamado "Arduino" surgirá ao lado do menu Help.&lt;/p&gt;
&lt;p&gt;Para o próximo passo, clique em: &lt;code&gt;Arduino -&amp;gt; Preferences -&amp;gt; Select Arduino Application Folder&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Insira a localização da instalação das bibliotecas do Arduino no seu sistema. A minha está em &lt;code&gt;/usr/share/arduino&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Uma que você tenha escolhido o diretório correto, uma mensagem do tipo&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Arduino x.x.x is found at /usr/share/arduino&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;irá aparecer.&lt;/p&gt;
&lt;p&gt;Agora você pode desenvolver seus programas usando o Sublime Text e utilizar as opções do menu Arduino, como compilar, fazer upload do seu código, selecionar o modelo do Arduino, a porta usada para comunicação e todos os outros recursos que a Arduino IDE possuía e muito mais. Você verá também que a velocidade de compilação e upload usando o Sublime Text é muito maior do que a realizada pela Arduino IDE.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="images/mstuttgart/snapshot_4.png" /&gt;&lt;/p&gt;
&lt;p&gt;É isso pessoal. Agora você já pode se divertir com Arduino desenvolvendo seus códigos em um editor de texto profissional.&lt;/p&gt;
&lt;p&gt;Esse tutorial foi baseado nas informações contidas &lt;a href="https://github.com/Robot-Will/Stino"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Obrigado por ler e até o próximo post!&lt;/p&gt;</summary><category term="Arduino"></category><category term="Tutorial"></category><category term="C++"></category><category term="Sublime Text"></category><category term="Software"></category></entry><entry><title>Fontes de texto serrilhadas no KDE</title><link href="http://codigoavulso.com.br/fontes-de-texto-serrilhadas-no-kde.html" rel="alternate"></link><published>2014-06-03T10:15:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-03:fontes-de-texto-serrilhadas-no-kde.html</id><summary type="html">&lt;p&gt;Eu tenho o KDE como meu ambiente gráfico favorito. Além de ser visualmente atraente, altamente configurável e muito fácil de usar. Mas como nem tudo é perfeito, nós as vezes encontramos alguns bugs chatos pra resolver. O bug em questão acontece após a instalação de alguns tipos de temas, deixando as fontes de todo o KDE mais finas e serrilhadas. Apesar disso ocorrer muito raramente, quando
acontece, as fontes não voltam ao normal mesmo que as configurações de alti-aliased das delas sejam alteradas. Eu já presenciei esse erro no KDE 4.9, 4.12 e 4.13 (o que uso atualmente). Depois de quebrar a cabeça com o bug eu finalmente consegui corrigi-lo e compartilho com vocês os passos a serem seguidos.
Inicialmente, vamos até o painel de configurações de fontes do KDE.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System Settings -&amp;gt; Application appearance -&amp;gt; Fonts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Onde está escrito &lt;code&gt;"Use anti-aliasing"&lt;/code&gt; selecione a opção &lt;code&gt;"Enable"&lt;/code&gt;, como ilustra a figura a seguir.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fonts" src="images/mstuttgart/snapshot_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Sem seguida, clique em &lt;code&gt;Configure..&lt;/code&gt;. Uma janela com algumas opções vai abrir. Deixe as suas configurações iguais as mostradas na figura abaixo e depois clique em &lt;code&gt;OK&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Configure" src="images/mstuttgart/snapshot_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Terminada as configurações acima, clique no botão em &lt;code&gt;Apply&lt;/code&gt; e feche a janela de configurações. Você pode perceber que mesmo configurando as fontes, elas ainda permanecem serrilhadas. Então, o próximo passo é ajustá-las manualmente.&lt;/p&gt;
&lt;p&gt;Vá para a sua pasta &lt;code&gt;home/usuario&lt;/code&gt; e procure o arquivo &lt;code&gt;.font.conf&lt;/code&gt;. Os arquivos cujo nome se inicia com &lt;code&gt;"."&lt;/code&gt; são arquivos ocultos do sistema. Caso o arquivo &lt;code&gt;.font.conf&lt;/code&gt; não apareça pra você, aperte o atalho &lt;code&gt;Alt + .&lt;/code&gt; . Feito isso, os arquivos devem ficar visíveis.&lt;/p&gt;
&lt;p&gt;Procure o arquivo &lt;code&gt;.font.conf&lt;/code&gt; e o abra em um editor de texto. Feito isso, substitua todos os &lt;code&gt;false&lt;/code&gt; que encontrar no arquivo por &lt;code&gt;true&lt;/code&gt; e reinicie o sistema. Quando você logar novamente, verá que as fontes voltaram ao normal e não estão mais serrilhadas. Essa configuração deve ser feita apenas quando ocorrer esse bug com a fontes do KDE.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Até o próximo post.&lt;/p&gt;</summary><category term="KDE"></category><category term="Tutorial"></category><category term="Linux Mint"></category></entry><entry><title>Encontrando os divisores de n</title><link href="http://codigoavulso.com.br/encontrando-os-divisores-de-n.html" rel="alternate"></link><published>2014-05-07T20:21:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-05-07:encontrando-os-divisores-de-n.html</id><summary type="html">&lt;p&gt;Nesta postagem, vamos aprender a criar um algoritmo que imprime todos os divisores de um dado número &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Um dado valor &lt;strong&gt;p&lt;/strong&gt;, onde &lt;strong&gt;p&lt;/strong&gt; diferente de &lt;strong&gt;zero&lt;/strong&gt;, é chamado divisor de &lt;strong&gt;n&lt;/strong&gt; se o resultado da divisão de &lt;strong&gt;n&lt;/strong&gt; por &lt;strong&gt;p&lt;/strong&gt; resultar em um quociente inteiro e resto &lt;strong&gt;zero&lt;/strong&gt;. Simplificando...&lt;/p&gt;
&lt;h4&gt;Exemplo&lt;/h4&gt;
&lt;p&gt;A divisão 6/2 possui quociente 3 e resto 0. Desse modo, temos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O dividendo n é 6;&lt;/li&gt;
&lt;li&gt;O divisor p é 2;&lt;/li&gt;
&lt;li&gt;O quociente q é 3;&lt;/li&gt;
&lt;li&gt;O resto r é 0;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Em outras palavras, podemos dizer que:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;**q \* p + r = n =&amp;gt; 3 * 2 + 0 = 6**.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seguindo outro exemplo:  7/2 possui quociente 3 e resto 1.  &lt;/p&gt;
&lt;p&gt;Com os exemplos acima, podemos verificar que se um número &lt;strong&gt;n&lt;/strong&gt; é divisivel por &lt;strong&gt;p&lt;/strong&gt;, o resto da divisão de &lt;strong&gt;n&lt;/strong&gt; por &lt;strong&gt;p&lt;/strong&gt; é nulo. Entendido esse conceito, basta passa-lo para o código.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Digite o valor de n: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Percorremos todo os numeros de 1 a n,   &lt;/span&gt;
    &lt;span class="c1"&gt;// verificando quais sao divisiveris por n  &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;  

        &lt;span class="c1"&gt;// Calculamos o resto da divisao   &lt;/span&gt;
        &lt;span class="c1"&gt;// de n por i, sendo que i vai de 1 a n  &lt;/span&gt;
        &lt;span class="n"&gt;resto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Se o resto for nulo (0), i e divisor de n.   &lt;/span&gt;
        &lt;span class="c1"&gt;// Imprimos o valor.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resto&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É isso. Até mais pessoal.&lt;/p&gt;</summary><category term="Java"></category><category term="Tutorial"></category><category term="C++"></category><category term="Programação"></category><category term="Algoritmo"></category></entry><entry><title>Encontrando o maior valor de um vetor</title><link href="http://codigoavulso.com.br/encontrando-o-maior-valor-de-um-vetor.html" rel="alternate"></link><published>2014-01-17T20:21:00-07:00</published><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-01-17:encontrando-o-maior-valor-de-um-vetor.html</id><summary type="html">&lt;p&gt;Iniciando as nossas postagens, o algoritmo a seguir encontra o maio valor entre um conjunto de valores armazenados em um vetor.
Os valores são armazenados em um vetor de inteiros e, em seguida, damos início ao processo de procura de maior valor.
A técnica utilizada é muito simples e pode ser adaptada para encontrarmos o menor valor e até mesmo para realizarmos a ordenação dos valores presentes no vetor em ordem crescente ou decrescente.&lt;/p&gt;
&lt;p&gt;A seguir temos o algoritmo em C++, mas pode facilmente ser adaptado para outras linguagens.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;

       &lt;span class="c1"&gt;// Vetor com os valores que desejamos ordenar&lt;/span&gt;
       &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;vNumeros&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

       &lt;span class="c1"&gt;// Variavel que recebera o maior valor&lt;/span&gt;
       &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maiorValor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="c1"&gt;// Inicializamos maiorValor com o primeiro numero do vetor&lt;/span&gt;
       &lt;span class="n"&gt;maiorValor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vNumeros&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

       &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;

                &lt;span class="c1"&gt;// Aqui esta a parte importante!&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;vNumeros&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maiorValor&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;maiorValor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vNumeros&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//for&lt;/span&gt;

        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;O maior numero e: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;maiorValor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inicialmente, inicializamos a variável maiorValor com o primeiro valor do vetor. Fazemos isso porque ao percorremos o vetor, o começamos do primeiro valor, ou seja, do índice 0 do vetor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;maiorValor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vNumeros&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em seguida, utilizamos o for para percorrermos o vetor a partir da segunda posição, ou seja, do índice 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;vNumeros&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maiorValor&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="n"&gt;maiorValor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vNumeros&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//for&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lembre-se que o maiorValor está com o valor de vNumeros[0], ou seja, 2.
Para cada posição do vetor, verificamos se o seu valor é maior que maiorValor. Se for, atualizamos a variável maiorValor com este novo valor.
Seguindo esse algoritmo, quando terminarmos de percorrer o vetor, teremos na variável maiorValor, o maior valor do vetor, ou seja, o valor 8.
Vale ressaltar que este algoritmo pode ser utilizado com outros tipos de valores, como floats, doubles, e com strings.&lt;/p&gt;
&lt;p&gt;Até o próximo tutorial.&lt;/p&gt;</summary><category term="Java"></category><category term="Tutorial"></category><category term="C++"></category><category term="Programação"></category><category term="Algoritmo"></category></entry></feed>