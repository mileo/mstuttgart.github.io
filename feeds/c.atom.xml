<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Código Avulso</title><link href="http://codigoavulso.com.br/" rel="alternate"></link><link href="http://codigoavulso.com.br/feeds/c.atom.xml" rel="self"></link><id>http://codigoavulso.com.br/</id><updated>2014-06-19T09:30:00-07:00</updated><entry><title>Operadores Bit-a-Bit (Parte 5 de 5): Operador SHIFT</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-5-de-5-operador-shift.html" rel="alternate"></link><published>2014-06-19T09:30:00-07:00</published><updated>2014-06-19T09:30:00-07:00</updated><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-19:operadores-bit-a-bit-parte-5-de-5-operador-shift.html</id><summary type="html">&lt;p&gt;Neste ultimo tutorial sobre os operadores Bit-a-Bit, vamos falar sobre o operador &lt;code&gt;SHIFT&lt;/code&gt;. O operador SHIFT serve para deslocarmos os bits de um número para esquerda ou para direita uma determinada quantidade de vezes. Embora pareça algo sem simples, esse deslocamento possui muitas aplicações. É o que veremos a seguir.&lt;/p&gt;
&lt;h4&gt;SHIFT Esquerdo (&amp;lt;&amp;lt;)&lt;/h4&gt;
&lt;p&gt;O SHIFT Esquerdo (&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;) desloca para esquerda todos os bits de um número um determinado número de vezes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Valor de saída é &lt;code&gt;10&lt;/code&gt; decimal ou &lt;code&gt;00001010&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Ao observarmos o valor de &lt;code&gt;c&lt;/code&gt;, percebemos que ele dobrou. Esse detalhe está relacionado com uma das aplicações mais comuns do operador &lt;code&gt;SHIFT Esquerdo&lt;/code&gt;: a multiplicação.&lt;/p&gt;
&lt;p&gt;Toda vez que utilizamos o operador &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; obtemos como resultado um valor equivalente ao operando multiplicado por 2 elevado ao número de deslocamentos, ou seja:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x &amp;lt;&amp;lt; n* é o mesmo que x * 2^n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As operações de multiplicação e divisão são operações custosas para o processador, sendo uma das que levam mais tempo (ou ciclos) para serem completadas. Quando necessitamos executar operações de multiplicação por valores que são potência de 2, podemos usar o operador &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; que é uma operação mais rápida que a multiplicação usando o operador &lt;code&gt;*&lt;/code&gt; e nos devolve o mesmo resultado.&lt;/p&gt;
&lt;h4&gt;SHIFT Direito (&amp;gt;&amp;gt;)&lt;/h4&gt;
&lt;p&gt;O SHIFT para direita (&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;) desloca para direita todos os bits de um número um determinado número de vezes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A saída é &lt;code&gt;2&lt;/code&gt; decimal ou &lt;code&gt;00000010&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Assim como o SHIFT Esquerdo, o &lt;code&gt;SHIFT Direito&lt;/code&gt; pode realizar operações aritméticas, porém neste caso ele realiza a divisão (inteira) do operando por uma potência de 2. No exemplo acima podemos perceber que a variável c recebeu o parte inteira da divisão de &lt;code&gt;5&lt;/code&gt; por &lt;code&gt;2^1&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x &amp;gt;&amp;gt; n* é o mesmo que x / 2^n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O operador SHIFT ainda possui diversos exemplos de uso, então não deixe de procurá-los.&lt;/p&gt;
&lt;p&gt;Espero que essa série de tutoriais tenha lhe ajudado a entender mais sobre essas ferramentas interessante s que são os operadores Bit-a-Bit.&lt;/p&gt;
&lt;p&gt;Obrigado por ler! Até o próximo post.
t+&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="tutorial"></category><category term="operador bit-a-bit"></category><category term="binario"></category></entry><entry><title>Operadores Bit-a-Bit (Parte 4 de 5): Operador NOT</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-4-de-5-operador-not.html" rel="alternate"></link><published>2014-06-09T20:31:00-07:00</published><updated>2014-06-09T20:31:00-07:00</updated><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-09:operadores-bit-a-bit-parte-4-de-5-operador-not.html</id><summary type="html">&lt;p&gt;Mais um capítulo do nosso tutorial sobre operadores lógicos e operações bit-a-bit.
Hoje veremos o operador &lt;code&gt;NOT&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Operador NOT&lt;/h4&gt;
&lt;p&gt;O operador &lt;code&gt;NOT (~)&lt;/code&gt;, talvez seja o mais simples de todos. Diferente dos outros operadores Bit-a-Bit, o operador NOT opera apenas sobre um operando, invertendo o estado de cada bit, ou seja, se o bit for &lt;code&gt;1&lt;/code&gt; ele será mudado para &lt;code&gt;0&lt;/code&gt;, e vice-versa.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Bit&lt;/th&gt;
&lt;th align="center"&gt;Saída&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Exemplo&lt;/h4&gt;
&lt;p&gt;Abaixo temos um exemplo de uso do operador &lt;code&gt;NOT&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída igual a &lt;code&gt;250&lt;/code&gt; decimal ou &lt;code&gt;11111010&lt;/code&gt; binário.&lt;/p&gt;
&lt;p&gt;Um dos mais comuns usos do operador NOT é para encontrar o &lt;code&gt;complemento de 2&lt;/code&gt; de um número binário. Em um número binário de 8 bits conseguimos representar valores de &lt;code&gt;0&lt;/code&gt; a &lt;code&gt;255&lt;/code&gt; (&lt;code&gt;11111111&lt;/code&gt; em binário), considerando que estamos trabalhando com número absolutos, ou seja, maiores ou iguais a zero . Entretanto, quando desejamos representar valores negativos e positivos usando valores binários devemos usar o complemento de 2. Desse modo, o nosso intervalo de representação de 8 bits diminui o valor positivo máximo, mas por outro lado, conseguimos representar números negativos. Sendo assim nossos valores vão de &lt;code&gt;-128&lt;/code&gt; a &lt;code&gt;127&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Exemplo 2&lt;/h4&gt;
&lt;p&gt;Para encontrarmos o &lt;code&gt;complemento de 2&lt;/code&gt; (o valor negativo) de um número usando o operador NOT, seguimos os seguintes passos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída igual a &lt;code&gt;-5&lt;/code&gt; decimal ou &lt;code&gt;11111011&lt;/code&gt; binário.&lt;/p&gt;
&lt;p&gt;Os números em complemento de 2, quando são negativos, sempre possuem seu bit mais significativo (bit mais à direita) com o valor &lt;code&gt;1&lt;/code&gt;. A principal vantagem de usarmos essa técnica é que as regras para as operação de soma e de subtração são as mesmas, ou seja, se desejamos subtrair um número &lt;code&gt;b&lt;/code&gt; de outro número &lt;code&gt;a&lt;/code&gt;, basta simplesmente somar-lo ao complemento de 2 de &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Até o próximo tutorial.&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="tutorial"></category><category term="operador bit-a-bit"></category><category term="binario"></category></entry><entry><title>Operadores Bit-a-Bit (Parte 3 de 5): Operador XOR</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-3-de-5-operador-xor.html" rel="alternate"></link><published>2014-06-09T19:35:00-07:00</published><updated>2014-06-09T19:35:00-07:00</updated><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-09:operadores-bit-a-bit-parte-3-de-5-operador-xor.html</id><summary type="html">&lt;p&gt;Continuando a nossa série de tutoriais, hoje veremos o operador XOR (&lt;code&gt;^&lt;/code&gt;) ou como é conhecido, &lt;code&gt;OU-Exclusivo&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Operador XOR&lt;/h4&gt;
&lt;p&gt;Como o próprio nome sugere, o &lt;code&gt;XOR&lt;/code&gt; é um tipo especial de operação OR.
&lt;code&gt;XOR (^)&lt;/code&gt; é um operando binário que executa uma operação &lt;code&gt;XOR (ou-exclusivo)&lt;/code&gt; com cada par de bits dos operandos. O bit resultante é &lt;code&gt;1&lt;/code&gt; apenas se os dois bits operandos forem diferentes; caso contrário o resultante é &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Bit 1&lt;/th&gt;
&lt;th align="left"&gt;Bit 2&lt;/th&gt;
&lt;th align="left"&gt;Saída&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Exemplo&lt;/h4&gt;
&lt;p&gt;O &lt;code&gt;operador XOR&lt;/code&gt; utilizado quando desejamos uma verificar se cada um dos bits de um par de operandos são realmente diferentes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00001001&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A saída é &lt;code&gt;12&lt;/code&gt; decimal ou &lt;code&gt;00001100&lt;/code&gt; binário.&lt;/p&gt;
&lt;p&gt;Eu não encontrei exemplos mais genéricos de uso do XOR. Se você, leitor, souber algum não deixe de postar nos comentários.&lt;/p&gt;
&lt;p&gt;Obrigado por ler e até o próximo tutorial.&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="tutorial"></category><category term="operador bit-a-bit"></category><category term="binario"></category></entry><entry><title>Operadores Bit-a-Bit (Parte 2 de 5): Operador OR</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-2-de-5-operador-or.html" rel="alternate"></link><published>2014-06-05T11:19:00-07:00</published><updated>2014-06-05T11:19:00-07:00</updated><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-05:operadores-bit-a-bit-parte-2-de-5-operador-or.html</id><summary type="html">&lt;p&gt;No tutorial anterior, realizamos um estudo sobre o &lt;code&gt;operador AND&lt;/code&gt; e seus exemplos de uso. Se você ainda não leu, veja aqui. Agora vamos prosseguir estudando o &lt;code&gt;operador OR&lt;/code&gt; e mostrando alguns exemplos de uso do mesmo.&lt;/p&gt;
&lt;h4&gt;Operador OR&lt;/h4&gt;
&lt;p&gt;O &lt;code&gt;operador OR (|)&lt;/code&gt; é um operador binário que executa uma operação &lt;code&gt;OR&lt;/code&gt; com cada par de bits dos operandos. O bit resultante é &lt;code&gt;0&lt;/code&gt; se os dois bits operandos forem 0; caso contrário o bit resultante é &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Bit 1&lt;/th&gt;
&lt;th align="left"&gt;Bit 2&lt;/th&gt;
&lt;th align="left"&gt;Saída&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00001001&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A saída é &lt;code&gt;13&lt;/code&gt; em decimal ou &lt;code&gt;00001101&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;De maneira semelhante ao operador AND, o operador OR também pode ser usado para definir um valor específico para um determinado bit. Só que ao contrário do AND, que era usado para &lt;code&gt;"desligar"&lt;/code&gt; um dado bit, o operador OR é usado para &lt;code&gt;"ligá-lo"&lt;/code&gt;, ou seja, torna-lo igual a &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Exemplo&lt;/h4&gt;
&lt;p&gt;Vamos ligar o quarto bit do valor armazenado em a;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;b00001000&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A saída é &lt;code&gt;13&lt;/code&gt; decimal ou &lt;code&gt;00001101&lt;/code&gt; binário.&lt;/p&gt;
&lt;p&gt;Observe que após essa operação, nós conseguimos &lt;code&gt;"ligar"&lt;/code&gt; o quarto bit enquanto todos os outros bits continuam com seus valores iniciais.&lt;/p&gt;
&lt;p&gt;É isso pessoal. Esse tutorial foi mais simples porque a maior parte dos detalhes e explicações eu já havia adicionado na parte 1.&lt;/p&gt;
&lt;p&gt;Até o próximo tutorial.&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="operador bit-a-bit"></category><category term="tutorial"></category><category term="binario"></category></entry><entry><title>Operadores Bit-a-Bit (Parte 1 de 5): Operador AND</title><link href="http://codigoavulso.com.br/operadores-bit-a-bit-parte-1-de-5-operador-and.html" rel="alternate"></link><published>2014-06-04T19:30:00-07:00</published><updated>2014-06-04T19:30:00-07:00</updated><author><name>Michell Stuttgart</name></author><id>tag:codigoavulso.com.br,2014-06-04:operadores-bit-a-bit-parte-1-de-5-operador-and.html</id><summary type="html">&lt;p&gt;Operadores Bit-a-bit são usados quando desejamos manipular diretamente os bits de um determinado número. Seu uso é muito fundamental em aplicações onde precisamos lidar diretamente com bits, como aplicações envolvendo hardware (Arduino, por exemplo) e até mesmo emuladores. Os exemplos estão em C++, mas podem ser facilmente adaptados para outras linguagens. Para fins de organização, pretendo dividir os tutoriais em 5 partes, cada um deles abordando um operador (AND, OR, XOR, NOT e SHIFT) e mostrando exemplos de uso.&lt;/p&gt;
&lt;p&gt;Para se trabalhar com os operadores bit-a-bit, nossos dados devem ser valores numéricos, não-negativos e inteiros. As variáveis devem ser do tipo unsigned, como por exemplo, unsigned short ( 16 bits ) e unsigned char (8 bits ou 1 byte), dependendo do número de bits que você precisar.&lt;/p&gt;
&lt;h4&gt;Operador AND&lt;/h4&gt;
&lt;p&gt;O operador &lt;code&gt;AND (&amp;amp;)&lt;/code&gt; é um operando binário que executa uma operação AND com cada par de bits dos operandos. O bit resultante é 1 se os dois bits operandos forem 1; caso contrário o resultante é 0.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Bit 1&lt;/th&gt;
&lt;th align="center"&gt;Bit 2&lt;/th&gt;
&lt;th align="center"&gt;Saida&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 00001001&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída: &lt;code&gt;1&lt;/code&gt; ou &lt;code&gt;00000001&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;O operador AND também pode ser usado quando desejamos verificar se um determinado bit de um operando é 0 ou 1.  No exemplo abaixo, vamos verificar se o terceiro bit do valor armazenado em a é 0 ou 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 00000100&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída: &lt;code&gt;4&lt;/code&gt; ou &lt;code&gt;00000100&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Porque usamos o valor 4 para a variável &lt;code&gt;b&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Note que o valor 4 possui todos os seus bits iguais a 0 com exceção do terceiro bit, que é o que desejamos. Sempre devemos escolher um número que possua o bit &lt;code&gt;1&lt;/code&gt; na posição dos bit(s) que desejamos verificar se é &lt;code&gt;0&lt;/code&gt; ou &lt;code&gt;1&lt;/code&gt;. Se o nosso objetivo fosse encontrar o valor do quarto bit de a, deveríamos fazer&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00001000&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saída: &lt;code&gt;8&lt;/code&gt; ou &lt;code&gt;00000000&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Com exemplo acima percebemos que, se o o digito em questão for &lt;code&gt;1&lt;/code&gt;, o resultado de &lt;code&gt;a &amp;amp; b&lt;/code&gt; será igual a ao valor armazenado em &lt;code&gt;b&lt;/code&gt;. Se o digito for &lt;code&gt;0&lt;/code&gt;, o resultado da operação &lt;code&gt;a &amp;amp; b&lt;/code&gt; será &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Outra uso do operador &lt;code&gt;AND&lt;/code&gt; é quando desejamos "desligar", ou seja, tornar igual a &lt;code&gt;0&lt;/code&gt; um determinado bit do número.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 00000101&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos supor que desejamos desligar o terceiro bit de a. Basta realizarmos uma operação &lt;code&gt;AND&lt;/code&gt; com um operando que possua o valor &lt;code&gt;0&lt;/code&gt; no digito que desejamos "desligar" e &lt;code&gt;1&lt;/code&gt; nos demais bits.&lt;/p&gt;
&lt;h4&gt;Exemplo&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;251&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 11111011&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realizando o &lt;code&gt;AND&lt;/code&gt;, teremos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saida: &lt;code&gt;1&lt;/code&gt; ou &lt;code&gt;0000 0001&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Como podemos observar, conseguimos "desligar" o terceiro bit do valor de &lt;code&gt;a&lt;/code&gt;.
Uma pergunta que pode surgir é como saber que valor usar em &lt;code&gt;b&lt;/code&gt;. No exemplo acima utilizamos &lt;code&gt;b = 251&lt;/code&gt;, mas como sabemos que esse valor daria certo. A ideia aqui é se basear na representação binária e não na decimal, ou seja, você deve encontrar um valor em binário que satisfaça a operação que você deseja (no nosso caso, o valor &lt;code&gt;11111011&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Uma maneira de deixar esse raciocínio mais intuitivo é usar um valor diretamente na base binária ao invés da base decimal. No C++, a operação que fizemos logo acima ficaria assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;b11111011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 251&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saida: &lt;code&gt;1&lt;/code&gt; ou &lt;code&gt;00000001&lt;/code&gt; em binário.&lt;/p&gt;
&lt;p&gt;Lembrando que o número de bits não deve ultrapassar a capacidade do tipo da variável. Acima utilizamos &lt;code&gt;unsigned char&lt;/code&gt; que tem capacidade para &lt;code&gt;8 bits&lt;/code&gt;. Se armazenarmos um valor que necessita de mais de 8 bits, esse valor será truncado (quebrado) para que possa ser armazenado em 8 bits. Provavelmente você terá uma valor errado como saída, então sempre se atente a isso, ok?&lt;/p&gt;
&lt;p&gt;Com este tutorial, tentei mostrar algumas exemplos de uso do operador AND. É claro que existem muitos outros caso de uso, mas tentei focar aqui no mais básico.&lt;/p&gt;
&lt;p&gt;É isso pessoal! Obrigado por ler e até o próximo &lt;em&gt;post&lt;/em&gt;!
t+&lt;/p&gt;</summary><category term="c"></category><category term="c++"></category><category term="algoritmo"></category><category term="tutorial"></category><category term="binario"></category><category term="operador bit-a-bit"></category></entry></feed>